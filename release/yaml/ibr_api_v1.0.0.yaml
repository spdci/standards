openapi: 3.0.3
info:
  title: Interoperability APIs - Integrated Beneficiary Registry
  x-logo:
    url: ./dci-logo.png
    backgroundColor: '#FFFFFF'
    altText: Digital Convergence Initiative
  description: |-
    The IBR(Integrated Beneficiary Registry) interoperability APIs describes different APIs some of them are usecase specific and other are generalized APIs to perform interoperable operations between IBR registry and SP-System.
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in upcoming version.

    1. Search: The Search API provides functionality to search based on demographic, identifiers and custom query
    2. Enrollment updates: The enrollment updates API send  details of beneficiaries enrolled in programs  from SP-System system
    3. Enrolled : the enrolled API is a special type of search to return the programs a beneficiary is enrolled in

    Gitbook reference link[WIP]:
    - [Integrated Beneficiary Registry - V1.0 ](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0)

    Code directory links:
    - [Assistance Unit](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0/ibr/1.-crvs/data/code-directory/cd.ibr.01-assistance_unit)
    - [Enrollment Status](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0/ibr/1.-crvs/data/code-directory/cd.ibr.02-enrolment_status)
    - [Benefit Type](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0/ibr/1.-crvs/data/code-directory/cd.ibr.03-benefit_type)
    - [Institution Type](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0/ibr/1.-crvs/data/code-directory/cd.ibr.04-institution_type)   
    - [Legal Status](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0/ibr/1.-crvs/data/code-directory/cd.ibr.05-legal_status)
    - [Social Protection Functions](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0/ibr/1.-crvs/data/code-directory/cd.ibr.06-social_protection_functions)
    - [Contribution Type](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0/ibr/1.-crvs/data/code-directory/cd.ibr.07-contribution_type)
    - [Programme Type](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0/ibr/1.-crvs/data/code-directory/cd.ibr.08-programme_type)

    Data Objects:
    - [Beneficiary](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0/ibr/1.-crvs/data/data-objects/do.ibr.01-beneficiary)
    - [Programme](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0/ibr/1.-crvs/data/data-objects/do.ibr.02-programme)
    - [Benefit](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0/ibr/1.-crvs/data/data-objects/do.ibr.03-benefit)
    - [Benefit Frequency](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0/ibr/1.-crvs/data/data-objects/do.ibr.o4-benefit-frequency) 
    - [Group](https://standards.spdci.org/standards/v/wip-social-registry-v1.0.0/social-registry/1.-crvs/data/data-objects/do.sr.02-group)
    - [Member](https://standards.spdci.org/standards/v/wip-social-registry-v1.0.0/social-registry/1.-crvs/data/data-objects/do.sr.03-member)


    Each request is build up of three parts 
    - signature 
    - header 
    - message

    Information about each part is given below

    **Signature:**
    - The signature is used to verify the integrity of the message.
    - The signature is a hash of the message and is encrypted using the private key of the sender.
    - The receiver can verify the signature using the public key of the sender.

    **Header:**
    - The header contains information about various message header, refer to the header schema for more details.

    **Message:**

    - The message contains the actual payload of the message.
    - Refer example section to get sample data and also read Gitbook for details data objects
    - The receiver can decrypt the message using the private key of the "err.receiver_id.invalid"
  version: 1.0.0
  contact:
    name: DCI Social Protection
    email: info@spdci.org
  license:
    name: DCI Social Protection License
    url: 'https://api.spdci.org/LICENSE.md'
servers:
  - url: 'https://sandbox.spdci.org/namespace/v1.0.0'
    description: Sandbox Server
tags:
  - name: Async
    description: Async endpoints
  - name: Sync
    description: Sync endpoints
  - name: Schemas
    description: Schemas
  - name: Status Codes
    description: Status Codes
  - name: SearchRequest
    x-displayName: SearchRequest
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/SearchRequest" />    
  - name: SearchResponse
    x-displayName: SearchResponse
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/SearchResponse" />  
  - name: SearchStatusReasonCode
    x-displayName: SearchStatusReasonCode
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/SearchStatusReasonCode" />          
  - name: TxnStatusRequest
    x-displayName: TxnStatusRequest
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/TxnStatusRequest" />    
  - name: TxnStatusResponse
    x-displayName: TxnStatusResponse
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/TxnStatusResponse" />    
  - name: EnrollmentUpdatesRequest
    x-displayName: EnrollmentUpdatesRequest
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/EnrollmentUpdatesRequest" />    
  - name: EnrollmentUpdatesResponse
    x-displayName: EnrollmentUpdatesResponse
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/EnrollmentUpdatesResponse" />    
  - name: EnrolledRequest
    x-displayName: EnrolledRequest
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/EnrolledRequest" />    
  - name: EnrolledResponse
    x-displayName: EnrolledResponse
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/EnrolledResponse" />    
  - name: EncryptedMessage
    x-displayName: EncryptedMessage
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/EncryptedMessage" />    
x-tagGroups:
  - name: API Definitions
    tags:
      - Async
      - Sync
  - name: Schema Objects
    tags:
      - SearchRequest
      - SearchResponse
      - EnrollmentUpdatesRequest
      - EnrollmentUpdatesResponse
      - EnrolledRequest
      - EnrolledResponse
      - TxnStatusRequest
      - TxnStatusResponse
      - EncryptedMessage
  - name: Status Codes
    tags:
      - SearchStatusReasonCode
paths:
  /registry/search:
    post:
      summary: /registry/search
      description: |-
        The async search api will accept request and will send response to on-search endpoint. The IBR will implement /registry/search endpoint and SP-System shall implement /registry/on-search to receive data from IBR.
        The search request message consist of reg_event_type, query_type, query, sort, pagination, consent, authorize, locale. The IBR will validate the request and will send response to on-search endpoint. 
        Information for each field is given below.
          - reg_event_type: The event type for which search to be performed, this can be any of event type explained in RegistryEventType.yaml
          - query_type: The query type on which registry to determene type of search process, this can be any of query type explained in QueryType.yaml
          - query: The query will indicate payload of data which to be seached in registry, this can be any of explained in RegistryQueries.yaml
      operationId: post_reg_search
      tags:
        - Async
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                signature:
                  $ref: '#/components/schemas/MsgSignature'
                header:
                  allOf:
                    - $ref: '#/components/schemas/MsgHeader_V1.0.0'
                    - properties:
                        action:
                          enum:
                            - search
                message:
                  type: object
                  description: The search data using which registry search to be performed
                  oneOf:
                    - $ref: '#/components/schemas/SearchRequest'
                    - $ref: '#/components/schemas/EncryptedMessage'
              required:
                - header
                - message
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/FileInfo'
                - properties:
                    action:
                      enum:
                        - search
      responses:
        '401':
          $ref: '#/components/responses/HttpErrorResponse'
        '403':
          $ref: '#/components/responses/HttpErrorResponse'
        '500':
          $ref: '#/components/responses/HttpErrorResponse'
        default:
          $ref: '#/components/responses/Response'
      security:
        - Authorization: []
      deprecated: false
  /registry/on-search:
    post:
      summary: /registry/on-search
      description: |-
        The /registry/on-search end point tobe implemented by SP-System to receive search results from IBR. 
        The IBR will send data in format explained in SearchResponse.yaml. The reg_records will containe data that in explained in ibr/v1/Person.jsonld. 
        Refer example json at github [link](https://app.gitbook.com/o/0iSqNDBWH70sLmGExne0/s/bUVnrLEoih8bOGfpNjnB/1.-crvs/data/data-objects/person#example)
      operationId: post_reg_on-search
      tags:
        - Async
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                signature:
                  $ref: '#/components/schemas/MsgSignature'
                header:
                  allOf:
                    - $ref: '#/components/schemas/MsgCallbackHeader_V1.0.0'
                    - properties:
                        action:
                          enum:
                            - on-search
                message:
                  type: object
                  oneOf:
                    - $ref: '#/components/schemas/SearchResponse'
                    - $ref: '#/components/schemas/EncryptedMessage'
              required:
                - header
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/FileInfo'
                - properties:
                    action:
                      enum:
                        - on-search
      responses:
        '401':
          $ref: '#/components/responses/HttpErrorResponse'
        '403':
          $ref: '#/components/responses/HttpErrorResponse'
        '500':
          $ref: '#/components/responses/HttpErrorResponse'
        default:
          $ref: '#/components/responses/Response'
      security:
        - Authorization: []
      deprecated: false
  /registry/txn/status:
    post:
      summary: /registry/txn/status
      description: The /registry/txn/status will be implemented by IBR. This will check status of reach request using transaction_id and/or reference_id(s).
      operationId: post_reg_txnstatus
      tags:
        - Async
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                signature:
                  $ref: '#/components/schemas/MsgSignature'
                header:
                  allOf:
                    - $ref: '#/components/schemas/MsgHeader_V1.0.0'
                    - properties:
                        action:
                          enum:
                            - txn-status
                message:
                  type: object
                  oneOf:
                    - $ref: '#/components/schemas/TxnStatusRequest'
                    - $ref: '#/components/schemas/EncryptedMessage'
              required:
                - header
                - message
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/FileInfo'
                - properties:
                    action:
                      enum:
                        - txn-status
      responses:
        '401':
          $ref: '#/components/responses/HttpErrorResponse'
        '403':
          $ref: '#/components/responses/HttpErrorResponse'
        '500':
          $ref: '#/components/responses/HttpErrorResponse'
        default:
          $ref: '#/components/responses/Response'
      security:
        - Authorization: []
      deprecated: false
  /registry/txn/on-status:
    post:
      summary: /registry/txn/on-status
      description: The /registry/txn/on-status will be implemented by SP-System. The response with information about request and in some case it may contain data as well.
      operationId: post_reg_on-txnstatus
      tags:
        - Async
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                signature:
                  $ref: '#/components/schemas/MsgSignature'
                header:
                  allOf:
                    - $ref: '#/components/schemas/MsgCallbackHeader_V1.0.0'
                    - properties:
                        action:
                          enum:
                            - txn-on-status
                message:
                  type: object
                  oneOf:
                    - $ref: '#/components/schemas/TxnStatusResponse'
                    - $ref: '#/components/schemas/EncryptedMessage'
              required:
                - header
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/FileInfo'
                - properties:
                    action:
                      enum:
                        - txn-on-status
      responses:
        '401':
          $ref: '#/components/responses/HttpErrorResponse'
        '403':
          $ref: '#/components/responses/HttpErrorResponse'
        '500':
          $ref: '#/components/responses/HttpErrorResponse'
        default:
          $ref: '#/components/responses/Response'
      security:
        - Authorization: []
      deprecated: false
  /registry/sync/search:
    post:
      summary: /registry/sync/search
      description: |-
        The sync search api will accept request and will send response immediately
        The search request message consist of reg_event_type, query_type, query, sort, pagination, consent, authorize, locale. The IBR will validate the request and will send response to on-search endpoint. 
        Information for each field is given below.
          - reg_event_type: The event type for which search to be performed, this can be any of event type explained in RegistryEventType.yaml
          - query_type: The query type on which registry to determene type of search process, this can be any of query type explained in QueryType.yaml
          - query: The query will indicate payload of data which to be seached in registry, this can be any of explained in RegistryQueries.yaml
      operationId: post_reg_sync_search
      tags:
        - Sync
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                signature:
                  $ref: '#/components/schemas/MsgSignature'
                header:
                  allOf:
                    - $ref: '#/components/schemas/MsgHeader_V1.0.0'
                    - properties:
                        action:
                          enum:
                            - search
                message:
                  type: object
                  description: The search data using which registry search to be performed
                  oneOf:
                    - $ref: '#/components/schemas/SearchRequest'
                    - $ref: '#/components/schemas/EncryptedMessage'
              required:
                - header
                - message
      responses:
        '401':
          $ref: '#/components/responses/HttpErrorResponse'
        '403':
          $ref: '#/components/responses/HttpErrorResponse'
        '500':
          $ref: '#/components/responses/HttpErrorResponse'
        default:
          description: Registry search response
          content:
            application/json:
              schema:
                type: object
                properties:
                  signature:
                    $ref: '#/components/schemas/MsgSignature'
                  header:
                    allOf:
                      - $ref: '#/components/schemas/MsgCallbackHeader_V1.0.0'
                      - properties:
                          action:
                            enum:
                              - on-search
                  message:
                    type: object
                    oneOf:
                      - $ref: '#/components/schemas/SearchResponse'
                      - $ref: '#/components/schemas/EncryptedMessage'
                required:
                  - header
      security:
        - Authorization: []
      deprecated: false
  /registry/sync/enrollment/updates:
    post:
      summary: /registry/sync/enrollment/updates
      description: |-
        The /registry/enrollments/updates endpoint will be implemented by IBR to receive details of beneficiaries enrolled in programs  from SP-System.
        The receipt_type and beneficiaries will be required to make request. 
        Three receipt types are supported as of now, they are 
          1) Enrolled beneficiaries 
          2) Updated beneficiaries details
        The beneficiaries will contain list of beneficiaries information for which enrollments updated to be generated.
      operationId: post_reg_enrollments_updates
      tags:
        - Sync
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                signature:
                  $ref: '#/components/schemas/MsgSignature'
                header:
                  allOf:
                    - $ref: '#/components/schemas/MsgCallbackHeader_V1.0.0'
                    - properties:
                        action:
                          enum:
                            - notify
                message:
                  type: object
                  oneOf:
                    - $ref: '#/components/schemas/EnrollmentUpdatesRequest'
                    - $ref: '#/components/schemas/EncryptedMessage'
              required:
                - header
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/FileInfo'
                - properties:
                    action:
                      enum:
                        - notify
      responses:
        '401':
          $ref: '#/components/responses/HttpErrorResponse'
        '403':
          $ref: '#/components/responses/HttpErrorResponse'
        '500':
          $ref: '#/components/responses/HttpErrorResponse'
        default:
          $ref: '#/components/schemas/EnrollmentUpdatesResponse'
      security:
        - Authorization: []
      deprecated: false
  /registry/sync/enrolled:
    post:
      summary: /registry/sync/enrolled
      description: search programmes person is enrolled in
      operationId: post_reg_enrolled
      tags:
        - Sync
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                signature:
                  $ref: '#/components/schemas/MsgSignature'
                header:
                  allOf:
                    - $ref: '#/components/schemas/MsgHeader_V1.0.0'
                    - properties:
                        action:
                          enum:
                            - search
                message:
                  type: object
                  description: The search data using which registry search to be performed
                  oneOf:
                    - $ref: '#/components/schemas/EnrolledRequest'
                    - $ref: '#/components/schemas/EncryptedMessage'
              required:
                - header
                - message
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/FileInfo'
                - properties:
                    action:
                      enum:
                        - search
      responses:
        '401':
          $ref: '#/components/responses/HttpErrorResponse'
        '403':
          $ref: '#/components/responses/HttpErrorResponse'
        '500':
          $ref: '#/components/responses/HttpErrorResponse'
        default:
          $ref: '#/components/schemas/EnrolledResponse'
      deprecated: false
  /registry/sync/txn/status:
    post:
      summary: /registry/sync/txn/status
      description: The /registry/sync/txn/status will be implemented by IBR. This will check status of reach request using transaction_id and/or reference_id(s).
      operationId: post_reg_sync_txnstatus
      tags:
        - Sync
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                signature:
                  $ref: '#/components/schemas/MsgSignature'
                header:
                  allOf:
                    - $ref: '#/components/schemas/MsgHeader_V1.0.0'
                    - properties:
                        action:
                          enum:
                            - txn-status
                message:
                  type: object
                  oneOf:
                    - $ref: '#/components/schemas/TxnStatusRequest'
                    - $ref: '#/components/schemas/EncryptedMessage'
              required:
                - header
                - message
      responses:
        '401':
          $ref: '#/components/responses/HttpErrorResponse'
        '403':
          $ref: '#/components/responses/HttpErrorResponse'
        '500':
          $ref: '#/components/responses/HttpErrorResponse'
        default:
          description: Transaction status check response
          content:
            application/json:
              schema:
                type: object
                properties:
                  signature:
                    $ref: '#/components/schemas/MsgSignature'
                  header:
                    allOf:
                      - $ref: '#/components/schemas/MsgCallbackHeader_V1.0.0'
                      - properties:
                          action:
                            enum:
                              - txn-on-status
                  message:
                    type: object
                    oneOf:
                      - $ref: '#/components/schemas/TxnStatusResponse'
                      - $ref: '#/components/schemas/EncryptedMessage'
                required:
                  - header
      deprecated: false
components:
  schemas:
    EnrollmentUpdatesRequest:
      type: object
      description: Registry to notify a event to subscrbiers
      properties:
        transaction_id:
          $ref: '#/components/schemas/SearchRequest/properties/transaction_id'
        enrolled_updates:
          type: object
          description: |
            Receipt information contains receipt type and list of beneficiaries
            1) Enrolled beneficiaries - It return the beneficiaries enrolled  into system.
            2) Updated beneficiaries - If return updated status
          properties:
            beneficiaries:
              type: array
              description: |
                1. Attributes of a person to create fetch records, create verifiable credentials or use in search criteria.
                2. Allows Country/Registry specific implementation extensions using Attribute Name/Value pairs.
                @context: https://schema.spdci.org/extensions/ibr/v1/Beneficiary.jsonld <br>
                @type: "@context" <br>   
              items:
                $ref: '#/components/schemas/SearchResponse/properties/search_response/items/properties/data/properties/reg_records/items'
      required:
        - transaction_id
        - enrolled_updates
    EnrollmentUpdatesResponse:
      type: object
      description: Response to subscribe request.
      properties:
        transaction_id:
          $ref: '#/components/schemas/SearchRequest/properties/transaction_id'
        correlation_id:
          $ref: '#/components/schemas/SearchResponse/properties/correlation_id'
        enrolled_response:
          type: array
          items:
            type: object
            properties:
              reference_id:
                $ref: '#/components/schemas/TxnStatusRequest/properties/txnstatus_request/properties/reference_id'
              timestamp:
                $ref: '#/components/schemas/MsgHeader_V1.0.0/properties/message_ts'
              status:
                $ref: '#/components/schemas/MsgCallbackHeader_V1.0.0/properties/status'
              status_reason_message:
                description: Status reason code message. Helps actionanble messaging for systems/end users
                type: string
                maxLength: 999
            required:
              - reference_id
              - timestamp
              - status
      required:
        - transaction_id
        - correlation_id
        - enrolled_response
    SearchRequest:
      type: object
      description: |
        1. Functional registry specific extension to search.
        2. Additional checks using conditional expressions is possible.
        3. Allows Country/Registry specific implementation extensions using key/value pairs.
      properties:
        transaction_id:
          description: |
            1. transaction_id set by txn initiating system (i.e sender) to co-relate all related requests in the context of a business transaction.
            2. transaction_id should be same across processing systems/service end points.
            2. transaction_id uniqueness is ensured by txn initiating system (i.e sender)
          type: string
          maxLength: 99
          example: 0123456789
        search_request:
          type: array
          description: |
            1. Batch requests enable multiple individual requests with respective consent/authorize codes
          items:
            type: object
            properties:
              reference_id:
                $ref: '#/components/schemas/TxnStatusRequest/properties/txnstatus_request/properties/reference_id'
              timestamp:
                $ref: '#/components/schemas/MsgHeader_V1.0.0/properties/message_ts'
              search_criteria:
                type: object
                properties:
                  version:
                    type: string
                    default: 1.0.0
                  reg_event_type:
                    type: string
                    description: |
                      The IBR receive data from SP system , it has to differenciate of details based on event type, Usually SP system sends enrollement and enrollement status change events to IBR

                      1 : enrollement <br>
                      2 : enrollement_status_change <br>
                      3 : Deregister <br>  
                    enum:
                      - enrollement
                      - enrollement_status_change
                  query_type:
                    type: string
                    description: |
                      1. Query format allow multiple ways to search registry
                      2. Templatized query expressions with placeholder for conditional values
                    enum:
                      - idtype-value
                      - expression
                      - predicate
                    example: expression
                  query:
                    description: |
                      1. Implementing systems can define schemas.
                      2. Based on context, pre defined named queries can also help as part of ExpTemplate construct.
                      3. ExpressionWithConditionList is simple generic search query construct to solve for majority of search conditons. few examples: <br>
                        - search or subscribe to update events; e.g any updates in postal_code 12345 between 1/jan/2020 and 31/dec/2020
                        - search or subscribe to birth, death events; e.g any new birth in postal_code 12345 after 1/jan/2023
                        - search all farmers with land area less than 2 acers in district code 504
                    oneOf:
                      - type: object
                        description: Identifier type and value object
                        properties:
                          type:
                            type: string
                            description: |
                              @context: https://schema.spdci.org/common/v1/QueryTypeEnum.jsonld <br>
                              @type: "QueryType" <br>

                              **Notes:**
                                1. Query types that helps decode query expressions
                                2. Sample query type enums: "GraphQl", "Sql", "NoSql"
                            example: 'ns:org:QueryType:NoSql'
                          value:
                            type: object
                            description: |
                              @context: https://schema.spdci.org/common/v1/QueryExpression.jsonld <br>
                              @type: "QueryExpression" <br>

                              **Notes:**
                                1. Query expression's syntax / format is determined based on query-type.
                                2. Query expression as a template with placeholder to pass conditional search parameters
                            example:
                              expression:
                                collection: Group
                                query:
                                  $and:
                                    - poverty_score:
                                        $lt: 5
                                    - location:
                                        $eq: central_region
                                    - group_size:
                                        $lt: 5
                      - type: object
                        description: Identifier type and value object
                        properties:
                          type:
                            type: string
                            description: |
                              @context: https://schema.spdci.org/common/v1/IdentifierTypeEnum.jsonld <br>
                              @type: "IdType" <br>

                              **Notes:**
                                1. Identifier type values defined as per implementation context.
                                2. Usually a list of **enum** values of all possible queryable identifiers.
                                3. e.g: UIN, MOBILE, BRN, MRN, DRN, etc., 
                            example: UIN
                          value:
                            allOf:
                              - description: Identifier Value of the subject.
                              - oneOf:
                                  - type: string
                                  - type: integer
                                  - type: number
                                  - type: boolean
                                  - type: object
                                example: '1980'
                            example: '12314567890'
                      - type: array
                        items:
                          type: object
                          properties:
                            seq_num:
                              description: Sequence number to help define precedence for evaluating a list of expression Predicates
                              type: number
                              example: 1
                            expression1:
                              type: object
                              description: Expression
                              properties:
                                attribute_name:
                                  type: string
                                  description: |
                                    @context: https://schema.spdci.org/QueryAttributes" <br>
                                    @type: "QueryAttributes" <br>

                                    **Notes:**
                                      1. Query attribute names defined as per implementation context.
                                      2. Usually a list of **enum** values of all possible queryable attribute names.
                                      3. e.g: UIN, YOB, DOB, age, mobile, area-code, pin-code, etc.,
                                  example: YOB
                                operator:
                                  type: string
                                  description: Operator in an expression
                                  enum:
                                    - gt
                                    - lt
                                    - eq
                                    - ge
                                    - le
                                    - in
                                  example: eq
                                attribute_value:
                                  $ref: '#/paths/~1registry~1search/post/requestBody/content/application~1json/schema/properties/message/oneOf/0/properties/search_request/items/properties/search_criteria/properties/query/oneOf/1/properties/value/allOf/1'
                              required:
                                - attribute_name
                                - operator
                                - attribute_value
                            condition:
                              type: string
                              description: Condition in an expression
                              enum:
                                - and
                                - or
                                - not
                              example: and
                            expression2:
                              $ref: '#/paths/~1registry~1search/post/requestBody/content/application~1json/schema/properties/message/oneOf/0/properties/search_request/items/properties/search_criteria/properties/query/oneOf/2/items/properties/expression1'
                          required:
                            - expression1
                  sort:
                    type: array
                    items:
                      description: Sorting definition
                      type: object
                      properties:
                        attribute_name:
                          type: string
                          description: |
                            @context: https://schema.spdci.org/common/v1/Attribute.jsonld <br>
                            @type: "Attribute" <br>

                            **Notes:**
                              1. Attribute names defined as per implementation context.
                              2. Usually a list of **enum** values of all possible attribute names.
                              3. e.g: UIN, poverty_score, etc.,
                          example: poverty_score
                        sort_order:
                          type: string
                          enum:
                            - asc
                            - desc
                  pagination:
                    description: 'Pagination definition, count starts with 1'
                    type: object
                    properties:
                      page_size:
                        type: number
                        format: int32
                        example: 2000
                      page_number:
                        type: number
                        format: int32
                        default: 1
                        example: 5
                    required:
                      - page_size
                  consent:
                    type: object
                    description: |
                      @context: https://schema.spdci.org/Consent" <br>
                      @type: "Consent"
                    example:
                      '@context': 'https://standards.spdci.org/schemas//Consent'
                      '@type': Consent
                      ts:
                        $ref: '#/components/schemas/MsgHeader_V1.0.0/properties/message_ts'
                      purpose:
                        text:
                          type: string
                        code:
                          type: string
                          description: 'From a fixed set, documented at refUri'
                        ref_uri:
                          type: string
                          format: uri
                          description: Uri to provide more info on consent codes
                  authorize:
                    type: object
                    description: |
                      @context: https://schema.spdci.org/Authorize <br>
                      @type: "Authorize"
                    example:
                      '@context': 'https://standards.spdci.org/schemas/Authorize'
                      '@type': Authorize
                      ts:
                        $ref: '#/components/schemas/MsgHeader_V1.0.0/properties/message_ts'
                      purpose:
                        text:
                          type: string
                        code:
                          type: string
                          description: 'From a fixed set, documented at refUri'
                        ref_uri:
                          type: string
                          format: uri
                          description: Uri to provide more info on authorize codes
                required:
                  - query_type
                  - query
              locale:
                $ref: '#/components/schemas/TxnStatusRequest/properties/txnstatus_request/properties/locale'
            required:
              - reference_id
              - timestamp
              - search_criteria
      required:
        - transaction_id
        - search_request
    SearchResponse:
      type: object
      description: Response to search request. Multiple repsonses for each page can be pushed to the caller as an implementation!
      properties:
        transaction_id:
          $ref: '#/components/schemas/SearchRequest/properties/transaction_id'
        correlation_id:
          description: |
            1. correlation_id acknowledged by end txn processing system (i.e receiver) to co-relate all related requests in the context of a business transaction.
            2. correlation_id uniqueness is ensured by txn processing system (i.e receiver)
          type: string
          maxLength: 99
          example: '9876543210'
        search_response:
          type: array
          items:
            type: object
            properties:
              reference_id:
                $ref: '#/components/schemas/TxnStatusRequest/properties/txnstatus_request/properties/reference_id'
              timestamp:
                $ref: '#/components/schemas/MsgHeader_V1.0.0/properties/message_ts'
              status:
                $ref: '#/components/schemas/MsgCallbackHeader_V1.0.0/properties/status'
              status_reason_code:
                $ref: '#/components/schemas/SearchStatusReasonCode'
              status_reason_message:
                description: Status reason code message. Helps actionable messaging for systems/end users
                type: string
                maxLength: 999
              data:
                type: object
                description: |
                  Search result record as an outcome of search/subscribe action
                properties:
                  version:
                    type: string
                    default: 1.0.0
                  reg_records:
                    description: |
                      The "Beneficiary" object contains fields expected in response of search
                      @context: https://schema.spdci.org/extensions/ibr/v1/Beneficiary.jsonld <br>
                      @type: "@context" <br>
                      @container: "@set" <br>
                    type: array
                    items:
                      type: object
                      description: |
                        1. Attributes of a person to create fetch records, create verifiable credentials or use in search criteria.
                        3. Allows Country/Registry specific implementation extensions using Attribute Name/Value pairs.

                        @context: https://schema.spdci.org/extensions/ibr/v1/Beneficairy.jsonld <br>
                        @type: "@context" <br>
                      example:
                        '@context':
                          '@vocab': 'https://schema.spdci.org/extensions/ibr/v1'
                          xsd: 'http://www.w3.org/2001/XMLSchema#'
                          schema: 'http://schema.org/'
                          rdfs: 'http://www.w3.org/2000/01/rdf-schema#'
                          owl: 'http://www.w3.org/2002/07/owl#'
                        '@id': Beneficiary
                        '@type': Beneficiary
                        assistance_unit: '1'
                        member:
                          member_identifier: HS0205202401
                          demographic_info:
                            person:
                              identifier_type: NID
                              identifier_value: '0205202401'
                              name:
                                first_name: Test
                                second_name: Test2
                                surname: Test3
                              sex: F
                              birth_date: 02.05.2004
                              death_date: ''
                              address: ''
                              phone_number: ''
                              email: ''
                          relationship_head: ''
                          related_person: ''
                          is_disabled: '0'
                          disability_info: ''
                          marital_status: Single
                          employment_status: employed
                          occupation: Caregiver
                          income_level: ''
                          language_code: Eng
                          education_level: Highschool
                          additional_attributes: ''
                          registration_date: 02.05.2024
                          last_update: ''
                          programme_identifier:
                            programme:
                              programme_identifier: DCI001
                              programme_name: Test Programme
                            enrolment_date: 02.02.2024
                            enrolment_status: Active
                            status_change_date: ''
                            benefits:
                              benefit_type: Cash
                              benefit_date: 02.05.2024
                              benefit_value: USD 50
                              benefit_frequency: Monthly
                required:
                  - reg_records
              pagination:
                description: 'Pagination definition, count starts with 1'
                type: object
                properties:
                  page_size:
                    type: number
                    format: int32
                    example: 2000
                  page_number:
                    type: number
                    format: int32
                    example: 5
                  total_count:
                    type: number
                    format: int32
                    example: 24250
                required:
                  - page_size
                  - page_number
                  - total_count
              locale:
                $ref: '#/components/schemas/TxnStatusRequest/properties/txnstatus_request/properties/locale'
            required:
              - reference_id
              - timestamp
              - status
      required:
        - transaction_id
        - correlation_id
        - search_response
    SearchStatusReasonCode:
      type: string
      description: Identity verification request status reason codes
      enum:
        - rjct.reference_id.invalid
        - rjct.reference_id.duplicate
        - rjct.timestamp.invalid
        - rjct.search_criteria.invalid
        - rjct.filter.invalid
        - rjct.sort.invalid
        - rjct.pagination.invalid
        - rjct.search.too_many_records_found
    TxnStatusRequest:
      type: object
      description: Request to fetch txn status on various service requests
      properties:
        transaction_id:
          $ref: '#/components/schemas/SearchRequest/properties/transaction_id'
        txnstatus_request:
          type: object
          properties:
            reference_id:
              type: string
              description: Unique reference_id set by txn initiating system for each request in a batch
              example: '12345678901234567890'
            txn_type:
              type: string
              description: txn type to fetch status
              enum:
                - search
                - subscibe
                - receipt
            attribute_type:
              type: string
              enum:
                - transaction_id
                - reference_id_list
                - correlation_id
            attribute_value:
              oneOf:
                - $ref: '#/components/schemas/SearchRequest/properties/transaction_id'
                - type: array
                  items:
                    $ref: '#/components/schemas/TxnStatusRequest/properties/txnstatus_request/properties/reference_id'
                - $ref: '#/components/schemas/SearchResponse/properties/correlation_id'
            locale:
              type: string
              description: indicates language code. SPDCI Connect supports country codes as per ISO 639.3 standard
              pattern: '^[a-z]{3,3}$'
              example: en
          required:
            - reference_id
            - txn_type
            - attribute_type
            - attribute_value
      required:
        - transaction_id
        - txnstatus_request
    TxnStatusResponse:
      type: object
      description: txn status info on various service requests
      properties:
        transaction_id:
          $ref: '#/components/schemas/SearchRequest/properties/transaction_id'
        correlation_id:
          $ref: '#/components/schemas/SearchResponse/properties/correlation_id'
        txnstatus_response:
          type: object
          properties:
            txn_type:
              type: string
              description: txn type to fetch status
              enum:
                - search
                - subscibe
                - receipt
            txn_status:
              oneOf:
                - $ref: '#/components/schemas/SearchResponse'
                - type: object
                  description: Registry to notify a event to subscrbiers
                  properties:
                    transaction_id:
                      $ref: '#/components/schemas/SearchRequest/properties/transaction_id'
                    receipt_information:
                      $ref: '#/components/schemas/EnrollmentUpdatesRequest/properties/enrolled_updates'
                  required:
                    - transaction_id
                    - receipt_information
          example:
            $ref: '#/components/schemas/SearchResponse'
          required:
            - txn_type
            - txn_status
      required:
        - transaction_id
        - correlation_id
        - txnstatus_response
    EnrolledRequest:
      type: object
      description: Registry to notify a event to subscrbiers
      properties:
        transaction_id:
          $ref: '#/components/schemas/SearchRequest/properties/transaction_id'
        enrolled_criteria:
          type: object
          description: |
            Enrolled query
          properties:
            query_type:
              $ref: '#/components/schemas/SearchRequest/properties/search_request/items/properties/search_criteria/properties/query_type'
              description: ''
            response_entity:
              example: Beneficiary
              type: string
              description: |
                Define the type of response to have when executing the search
              enum:
                - Group
                - Member
            query:
              type: object
              description: Query expression for the enrolled query
              example:
                person_identifier:
                  eq: ABC451123
      required:
        - transaction_id
        - enrolled_criteria
    EnrolledResponse:
      type: object
      description: Response to search request. Multiple repsonses for each page can be pushed to the caller as an implementation!
      properties:
        transaction_id:
          $ref: '#/components/schemas/SearchRequest/properties/transaction_id'
        correlation_id:
          $ref: '#/components/schemas/SearchResponse/properties/correlation_id'
        search_response:
          type: array
          items:
            type: object
            properties:
              reference_id:
                $ref: '#/components/schemas/TxnStatusRequest/properties/txnstatus_request/properties/reference_id'
              timestamp:
                $ref: '#/components/schemas/MsgHeader_V1.0.0/properties/message_ts'
              status:
                $ref: '#/components/schemas/MsgCallbackHeader_V1.0.0/properties/status'
              status_reason_code:
                $ref: '#/components/schemas/SearchStatusReasonCode'
              status_reason_message:
                description: Status reason code message. Helps actionable messaging for systems/end users
                type: string
                maxLength: 999
              data:
                type: object
                description: |
                  Search result record as an outcome of search/subscribe action
                properties:
                  version:
                    type: string
                    default: 1.0.0
                  reg_records:
                    description: |
                      The "Beneficiary" object contains fields expected in response of search
                      @context: https://schema.spdci.org/extensions/ibr/v1/Beneficiary.jsonld <br>
                      @type: "@context" <br>
                      @container: "@set" <br>
                    type: array
                    items:
                      $ref: '#/components/schemas/SearchResponse/properties/search_response/items/properties/data/properties/reg_records/items'
                required:
                  - reg_records
              pagination:
                $ref: '#/components/schemas/SearchResponse/properties/search_response/items/properties/pagination'
              locale:
                $ref: '#/components/schemas/TxnStatusRequest/properties/txnstatus_request/properties/locale'
            required:
              - reference_id
              - timestamp
              - status
      required:
        - transaction_id
        - correlation_id
        - search_response
    EncryptedMessage:
      description: Encrypted payload
      type: object
      properties:
        header:
          type: object
          properties:
            alg:
              type: string
              description: The JWE algorithm used for encryption
            enc:
              type: string
              description: The encryption algorithm used for encrypting the plaintext
            kid:
              type: string
              description: The key identifier for the encryption key
          required:
            - alg
            - enc
            - kid
        ciphertext:
          type: string
          description: This is the result of encrypting the plaintext using the CEK and the IV. It's Base64Url-encoded.
        encrypted_key:
          type: string
          description: The base64-url encoded encrypted key
        tag:
          type: string
          description: 'This is a Base64Url-encoded value that provides evidence of the integrity and authenticity of the ciphertext, Initialization Vector, and Additional Authenticated Data'
        iv:
          type: string
          description: This is a Base64Url-encoded random bit string to be used as the Initialization Vector (IV) when encrypting the plaintext to produce the ciphertext. The size of the IV depends on the encryption algorithm used.
      required:
        - header
        - ciphertext
        - encrypted_key
        - tag
        - iv
    Error:
      description: |
        Commumication layer Asyn errors that are returned as part of message acknowledgement.
        1. Messages that are not parsable or message integrity check fails.
        2. This object may be used across all transport layer protocols (https, sftp, messaging, etc,) to ack the receipt of a message.
        3. Business context and related validation is NOT in scope of this error object.
      type: object
      properties:
        code:
          type: string
          description: Standard error code
          enum:
            - err.request.bad
            - err.request.unauthorized
            - err.request.forbidden
            - err.request.not_found
            - err.request.timeout
            - err.version.not_supported
            - err.request.too_many_requests
            - err.sender_id.invalid
            - err.sender_uri.invalid
            - err.receiver_id.invalid
            - err.signature.missing
            - err.signature.invalid
            - err.encryption.invalid
            - err.service.unavailable
        message:
          type: string
          description: message to describe above error code
          maxLength: 999
    FileInfo:
      type: object
      description: File info. Used in file upload feature using HTTPS
      properties:
        action:
          description: SPDCI Connect specific actions. Usually verb from the URI should go here to help store and fwd kind of processing requirements.
          type: string
        fileName:
          description: Disbursement instruction file representing Disburse or OnDisburse end point elements i.e signature/header/message entities as a file record
          type: string
          format: binary
        fileFormat:
          description: 'File content format. e.g json, csv, etc.,'
          type: string
          default: json
          example: csv
      required:
        - action
        - fileName
    MsgCallbackHeader_V1.0.0:
      type: object
      description: Message header
      properties:
        version:
          description: Messaing protocol specification version being used
          type: string
          default: 1.0.0
        message_id:
          description: |
            1. Unique message id to communicate between sender and receiver systems to realiable deliver the message over any transport layer i.e https, pub/sub, sftp etc.,
            2. The scope of message_id end with successful ack of the message by the receiver.
            3. To realy the message between hops, underlying relying parties may consider to store and forward the message with integirty, ie Signature intact.
          type: string
          example: '789'
        message_ts:
          $ref: '#/components/schemas/MsgHeader_V1.0.0/properties/message_ts'
        action:
          description: SPDCI Connect specific action. Usually verb from the URI should go here to help store and fwd kind of processing requirements.
          type: string
        status:
          type: string
          description: 'Request (e.g disburse, link, unlink, resolve, issue, search, verify, etc.,) status: <br> 1. rcvd: Received; Request received <br> 2. pdng: Pending; Request initiated <br> 3. succ: Success; Request successful <br> 4. rjct: Rejected; Request rejected'
          enum:
            - rcvd
            - pdng
            - succ
            - rjct
        status_reason_code:
          $ref: '#/components/schemas/MsgHeaderStatusReasonCode'
        status_reason_message:
          description: 'Status reascon code message, if any, Helps actionable messaging for system/end users'
          type: string
          maxLength: 999
        total_count:
          description: Total no of requests present in the message request
          type: integer
          example: 21800
        completed_count:
          description: No of requests in complteed state. Complete includes success and error requests due to funcational errors
          type: integer
          example: 50
        sender_id:
          description: |
            1. sender_id registered with the receiving system or gateway. 
            2. Used for authorization, encryption, digital sign verfication, etc., 
          type: string
          example: civilregistry.example.org
        receiver_id:
          description: 'receiver id registered with the calling system. Used for authorization, encryption, digital sign verfication, etc., functions.'
          type: string
          example: registry.example.org
        is_msg_encrypted:
          description: Is message encrypted?
          type: boolean
          default: false
        meta:
          $ref: '#/components/schemas/MsgHeader_V1.0.0/properties/meta'
      required:
        - message_id
        - message_ts
        - action
        - status
    MsgHeader_V1.0.0:
      type: object
      description: Message header
      properties:
        version:
          description: Messaing protocol specification version being used
          type: string
          default: 1.0.0
        message_id:
          description: |
            1. Unique message id to communicate between sender and receiver systems to realiable deliver the message over any transport layer i.e https, pub/sub, sftp etc.,
            2. The scope of message_id end with successful ack of the message by the receiver.
            3. To realy the message between hops, underlying relying parties may consider to store and forward the message with integirty, ie Signature intact.
          type: string
          example: '123'
        message_ts:
          description: |
            1. All dates and timestamps are represented in [ISO 8601](https://www.iso.org/standard/40874.html) format including timezone - e.g 2022-12-04T17:20:07-04:00.
          type: string
          format: date-time
          example: ''
        action:
          description: 'spdci Connect specific action. Usually verb from the URI. Helps in sync, async, store/fwd processing. Helps to identify payload type in message property.'
          type: string
        sender_id:
          description: |
            1. sender_id registered with the receiving system or gateway. 
            2. Used for authorization, encryption, digital sign verification, etc.,
          type: string
          example: spp.example.org
        sender_uri:
          description: |
            1. sender url to accept callbacks. Applicable only for async communications and if response ack_status is ACK.
            2. Default uri is assumed to be configured on the gateway as part of sender/receiver onboarding. 
            3. For SFTP based communications, this shall be set to server/folder details.
          type: string
          format: uri
          example: 'https://spp.example.org/{namespace}/callback/on-search'
        receiver_id:
          description: 'receiver id registered with the calling system. Used for authorization, encryption, digital sign verification, etc., functions.'
          type: string
          example: pymts.example.org
        total_count:
          description: Total no of requests present in the message request
          type: integer
          example: 21800
        is_msg_encrypted:
          description: Is message encrypted?
          type: boolean
          default: false
        meta:
          type: object
          description: |
            @context: https://schema.spdci.org/common/v1/Meta.jsonld <br>
            @type: "@context" <br>
              
            **Notes:**
              1. Additional meta info defined as per implementation context.
              2. Usually unencrypted list of name/value, tags, etc., to provide additional info to intermediary entities.
              3. The information SHOULD be privacy preserving
      required:
        - message_id
        - message_ts
        - action
        - sender_id
        - total_count
    MsgHeaderStatusReasonCode:
      type: string
      description: Message header related common status reason codes
      enum:
        - rjct.version.invalid
        - rjct.message_id.duplicate
        - rjct.message_ts.invalid
        - rjct.action.invalid
        - rjct.action.not_supported
        - rjct.total_count.invalid
        - rjct.total_count.limit_exceeded
        - rjct.errors.too_many
    MsgSignature:
      type: string
      description: 'Signature of {header}+{message} body verified using sender''s signing public key'
      example: 'Signature:  namespace="spdci", kidId="{sender_id}|{unique_key_id}|{algorithm}", algorithm="ed25519", created="1606970629", expires="1607030629", headers="(created) (expires) digest", signature="Base64(signing content)'
  responses:
    HttpErrorResponse:
      description: HTTP layer error details
      content:
        application/json:
          schema:
            type: object
            description: 'HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx'
            properties:
              errors:
                items:
                  type: object
                  properties:
                    code:
                      type: string
                      description: error code
                    message:
                      type: string
                      description: error message
    Response:
      description: Acknowledgement of message received after successful validation of message and signature
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: object
                properties:
                  ack_status:
                    type: string
                    description: |
                      1. ACK: If the request is valid (for basic checks) and async callback (i.e webhook) will be invoked by reciever back to the sender.
                      2. NACK: If the request is valid (for basic checks) and there is no futher updates from reciever back to the sender.
                      3. ERR: If the reuqest is invalid and reciver can't process the request. error object holds error code, message.
                    enum:
                      - ACK
                      - NACK
                      - ERR
                  timestamp:
                    $ref: '#/components/schemas/MsgHeader_V1.0.0/properties/message_ts'
                  error:
                    $ref: '#/components/schemas/Error'
                  correlation_id:
                    $ref: '#/components/schemas/SearchResponse/properties/correlation_id'
                required:
                  - ack_status
                  - timestamp
                  - correlation_id
  securitySchemas:
    Authorization:
      type: http
      scheme: bearer
      bearerFormat: jwt
      description: User/System authenticated access token; (jwt bearer) token returned from implementing system's authentication/token api end points. All systems must implement token api.
