openapi: 3.0.3
info:
  title: Interoperability APIs - Integrated Beneficiary Registry
  x-logo:
    url: ./dci-logo.png
    backgroundColor: '#FFFFFF'
    altText: Digital Convergence Initiative
  description: |-
    The IBR(Integrated Beneficiary Registry) interoperability APIs describes different APIs some of them are usecase specific and other are generalized APIs to perform interoperable operations between IBR registry and SP-System.
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in upcoming version.

    1. Search: The Search API provides functionality to search based on demographic, identifiers and custom query
    2. Enrollment updates: The enrollment updates API send  details of beneficiaries enrolled in programs  from SP-System
    3. Enrolled : the enrolled API is a special type of search to return the programs a beneficiary is enrolled in

    Gitbook reference link[WIP]:
    - [Integrated Beneficiary Registry - V1.0 ](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0)

    Code directory links:
    - [Assistance Unit](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0/ibr/1.-crvs/data/code-directory/cd.ibr.01-assistance_unit)
    - [Enrollment Status](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0/ibr/1.-crvs/data/code-directory/cd.ibr.02-enrolment_status)
    - [Benefit Type](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0/ibr/1.-crvs/data/code-directory/cd.ibr.03-benefit_type)
    - [Institution Type](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0/ibr/1.-crvs/data/code-directory/cd.ibr.04-institution_type)   
    - [Legal Status](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0/ibr/1.-crvs/data/code-directory/cd.ibr.05-legal_status)
    - [Social Protection Functions](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0/ibr/1.-crvs/data/code-directory/cd.ibr.06-social_protection_functions)
    - [Contribution Type](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0/ibr/1.-crvs/data/code-directory/cd.ibr.07-contribution_type)
    - [Programme Type](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0/ibr/1.-crvs/data/code-directory/cd.ibr.08-programme_type)

    Data Objects:
    - [Beneficiary](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0/ibr/1.-crvs/data/data-objects/do.ibr.01-beneficiary)
    - [Programme](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0/ibr/1.-crvs/data/data-objects/do.ibr.02-programme)
    - [Benefit](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0/ibr/1.-crvs/data/data-objects/do.ibr.03-benefit)
    - [Benefit Frequency](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0/ibr/1.-crvs/data/data-objects/do.ibr.o4-benefit-frequency) 
    - [Group](https://standards.spdci.org/standards/v/wip-social-registry-v1.0.0/social-registry/1.-crvs/data/data-objects/do.sr.02-group)
    - [Member](https://standards.spdci.org/standards/v/wip-social-registry-v1.0.0/social-registry/1.-crvs/data/data-objects/do.sr.03-member)


    Each request is build up of three parts 
    - signature 
    - header 
    - message

    Information about each part is given below

    **Signature:**
    - The signature is used to verify the integrity of the message.
    - The signature is a hash of the message and is encrypted using the private key of the sender.
    - The receiver can verify the signature using the public key of the sender.

    **Header:**
    - The header contains information about various message header, refer to the header schema for more details.

    **Message:**

    - The message contains the actual payload of the message.
    - Refer example section to get sample data and also read Gitbook for details data objects
    - The receiver can decrypt the message using the private key of the "err.receiver_id.invalid"
  version: 1.0.0
  contact:
    name: DCI Social Protection
    email: info@spdci.org
  license:
    name: DCI Social Protection License
    url: 'https://api.spdci.org/LICENSE.md'
servers:
  - url: 'https://sandbox.spdci.org/namespace/v1.0.0'
    description: Sandbox Server
tags:
  - name: Async
    description: Async endpoints
  - name: Sync
    description: Sync endpoints
  - name: Schemas
    description: Schemas
  - name: Status Codes
    description: Status Codes
  - name: SearchRequest
    x-displayName: SearchRequest
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/SearchRequest" />    
  - name: SearchResponse
    x-displayName: SearchResponse
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/SearchResponse" />  
  - name: SearchStatusReasonCode
    x-displayName: SearchStatusReasonCode
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/SearchStatusReasonCode" />        
  - name: SubscribeRequest
    x-displayName: SubscribeRequest
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/SubscribeRequest" />    
  - name: SubscribeResponse
    x-displayName: SubscribeResponse
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/SubscribeResponse" />    
  - name: SubscribeStatusReasonCode
    x-displayName: SubscribeStatusReasonCode
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/SubscribeStatusReasonCode" />        
  - name: UnSubscribeRequest
    x-displayName: UnSubscribeRequest
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/UnSubscribeRequest" />    
  - name: UnSubscribeResponse
    x-displayName: UnSubscribeResponse
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/UnSubscribeResponse" />  
  - name: UnSubscribeStatusReasonCode
    x-displayName: UnSubscribeStatusReasonCode
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/UnSubscribeStatusReasonCode" />        
  - name: TxnStatusRequest
    x-displayName: TxnStatusRequest
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/TxnStatusRequest" />    
  - name: TxnStatusResponse
    x-displayName: TxnStatusResponse
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/TxnStatusResponse" />    
  - name: EncryptedMessage
    x-displayName: EncryptedMessage
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/EncryptedMessage" />    
x-tagGroups:
  - name: API Definitions
    tags:
      - Async
      - Sync
  - name: Schema Objects
    tags:
      - SearchRequest
      - SearchResponse
      - SubscribeRequest
      - SubscribeResponse
      - UnSubscribeRequest
      - UnSubscribeResponse
      - EncryptedMessage
  - name: Status Codes
    tags:
      - SearchStatusReasonCode
      - SubscribeStatusReasonCode
      - UnSubscribeStatusReasonCode
paths:
  /registry/search:
    post:
      summary: /registry/search
      description: Search members(s) in registry using identifier or custom attributes
      operationId: post_reg_search
      tags:
        - Async
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                signature:
                  $ref: '#/components/schemas/MsgSignature'
                header:
                  allOf:
                    - $ref: '#/components/schemas/MsgHeader_V1.0.0'
                    - properties:
                        action:
                          enum:
                            - search
                message:
                  type: object
                  description: The search data using which registry search to be performed
                  oneOf:
                    - $ref: '#/components/schemas/SearchRequest'
                    - $ref: '#/components/schemas/EncryptedMessage'
              required:
                - header
                - message
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/FileInfo'
                - properties:
                    action:
                      enum:
                        - search
      responses:
        '401':
          $ref: '#/components/responses/HttpErrorResponse'
        '403':
          $ref: '#/components/responses/HttpErrorResponse'
        '500':
          $ref: '#/components/responses/HttpErrorResponse'
        default:
          $ref: '#/components/responses/Response'
      security:
        - Authorization: []
      deprecated: false
  /registry/on-search:
    post:
      summary: /registry/on-search
      description: Search results through callback
      operationId: post_reg_on-search
      tags:
        - Async
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                signature:
                  $ref: '#/components/schemas/MsgSignature'
                header:
                  allOf:
                    - $ref: '#/components/schemas/MsgCallbackHeader_V1.0.0'
                    - properties:
                        action:
                          enum:
                            - on-search
                message:
                  type: object
                  oneOf:
                    - $ref: '#/components/schemas/SearchResponse'
                    - $ref: '#/components/schemas/EncryptedMessage'
              required:
                - header
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/FileInfo'
                - properties:
                    action:
                      enum:
                        - on-search
      responses:
        '401':
          $ref: '#/components/responses/HttpErrorResponse'
        '403':
          $ref: '#/components/responses/HttpErrorResponse'
        '500':
          $ref: '#/components/responses/HttpErrorResponse'
        default:
          $ref: '#/components/responses/Response'
      security:
        - Authorization: []
      deprecated: false
  /registry/subscribe:
    post:
      summary: /registry/subscribe
      description: Subscribe to a life event with registry
      operationId: post_reg_subscribe
      tags:
        - Async
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                signature:
                  $ref: '#/components/schemas/MsgSignature'
                header:
                  allOf:
                    - $ref: '#/components/schemas/MsgHeader_V1.0.0'
                    - properties:
                        action:
                          enum:
                            - subscribe
                message:
                  type: object
                  description: Subscription request which contain query with frequency and other info on which notification to be sent by registry to subscriber
                  oneOf:
                    - $ref: '#/components/schemas/SubscribeRequest'
                    - $ref: '#/components/schemas/EncryptedMessage'
              required:
                - header
                - message
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/FileInfo'
                - properties:
                    action:
                      enum:
                        - subscribe
      responses:
        '401':
          $ref: '#/components/responses/HttpErrorResponse'
        '403':
          $ref: '#/components/responses/HttpErrorResponse'
        '500':
          $ref: '#/components/responses/HttpErrorResponse'
        default:
          $ref: '#/components/responses/Response'
      security:
        - Authorization: []
      deprecated: false
  /registry/on-subscribe:
    post:
      summary: /registry/on-subscribe
      description: Subscribe results through callback
      operationId: post_reg_on-subscribe
      tags:
        - Async
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                signature:
                  $ref: '#/components/schemas/MsgSignature'
                header:
                  allOf:
                    - $ref: '#/components/schemas/MsgHeader_V1.0.0'
                    - properties:
                        action:
                          enum:
                            - on-subscribe
                message:
                  type: object
                  description: Subscription information
                  oneOf:
                    - $ref: '#/components/schemas/SubscribeResponse'
                    - $ref: '#/components/schemas/EncryptedMessage'
              required:
                - header
                - message
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/FileInfo'
                - properties:
                    action:
                      enum:
                        - on-subscribe
      responses:
        '401':
          $ref: '#/components/responses/HttpErrorResponse'
        '403':
          $ref: '#/components/responses/HttpErrorResponse'
        '500':
          $ref: '#/components/responses/HttpErrorResponse'
        default:
          $ref: '#/components/responses/Response'
      security:
        - Authorization: []
      deprecated: false
  /registry/unsubscribe:
    post:
      summary: /registry/unsubscribe
      description: Unsubscribe existing subscription(s) by subscription_code
      operationId: post_reg_unsubscribe
      tags:
        - Async
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                signature:
                  $ref: '#/components/schemas/MsgSignature'
                header:
                  allOf:
                    - $ref: '#/components/schemas/MsgHeader_V1.0.0'
                    - properties:
                        action:
                          enum:
                            - unsubscribe
                message:
                  type: object
                  description: The unsubscribe request that contain subscription ids which to be removed from subscription list
                  oneOf:
                    - $ref: '#/components/schemas/UnSubscribeRequest'
                    - $ref: '#/components/schemas/EncryptedMessage'
              required:
                - header
                - message
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/FileInfo'
                - properties:
                    action:
                      enum:
                        - unsubscribe
      responses:
        '401':
          $ref: '#/components/responses/HttpErrorResponse'
        '403':
          $ref: '#/components/responses/HttpErrorResponse'
        '500':
          $ref: '#/components/responses/HttpErrorResponse'
        default:
          $ref: '#/components/responses/Response'
      security:
        - Authorization: []
      deprecated: false
  /registry/on-unsubscribe:
    post:
      summary: /registry/on-unsubscribe
      description: Unsubscribe response as a callback
      operationId: post_reg_on-unsubscribe
      tags:
        - Async
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                signature:
                  $ref: '#/components/schemas/MsgSignature'
                header:
                  allOf:
                    - $ref: '#/components/schemas/MsgHeader_V1.0.0'
                    - properties:
                        action:
                          enum:
                            - on-unsubscribe
                message:
                  type: object
                  oneOf:
                    - $ref: '#/components/schemas/UnSubscribeResponse'
                    - $ref: '#/components/schemas/EncryptedMessage'
              required:
                - header
                - message
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/FileInfo'
                - properties:
                    action:
                      enum:
                        - on-unsubscribe
      responses:
        '401':
          $ref: '#/components/responses/HttpErrorResponse'
        '403':
          $ref: '#/components/responses/HttpErrorResponse'
        '500':
          $ref: '#/components/responses/HttpErrorResponse'
        default:
          $ref: '#/components/responses/Response'
      security:
        - Authorization: []
      deprecated: false
  /registry/sync/search:
    post:
      summary: /registry/sync/search
      description: Search person(s) in registry using identifier or custome attributes
      operationId: post_reg_sync_search
      tags:
        - Sync
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                signature:
                  $ref: '#/components/schemas/MsgSignature'
                header:
                  allOf:
                    - $ref: '#/components/schemas/MsgHeader_V1.0.0'
                    - properties:
                        action:
                          enum:
                            - search
                message:
                  type: object
                  description: The search data using which registry search to be performed
                  oneOf:
                    - $ref: '#/components/schemas/SearchRequest'
                    - $ref: '#/components/schemas/EncryptedMessage'
              required:
                - header
                - message
      responses:
        '401':
          $ref: '#/components/responses/HttpErrorResponse'
        '403':
          $ref: '#/components/responses/HttpErrorResponse'
        '500':
          $ref: '#/components/responses/HttpErrorResponse'
        default:
          description: Registry search response
          content:
            application/json:
              schema:
                type: object
                properties:
                  signature:
                    $ref: '#/components/schemas/MsgSignature'
                  header:
                    allOf:
                      - $ref: '#/components/schemas/MsgCallbackHeader_V1.0.0'
                      - properties:
                          action:
                            enum:
                              - on-search
                  message:
                    type: object
                    oneOf:
                      - $ref: '#/components/schemas/SearchResponse'
                      - $ref: '#/components/schemas/EncryptedMessage'
                required:
                  - header
      security:
        - Authorization: []
      deprecated: false
  /registry/sync/enrollment/updates:
    post:
      summary: /registry/sync/enrollement/updates
      description: update the ibr that a person is registered in a program
      operationId: post_reg_enrollment_updates
      tags:
        - Sync
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                signature:
                  $ref: '#/components/schemas/MsgSignature'
                header:
                  allOf:
                    - $ref: '#/components/schemas/MsgHeader_V1.0.0'
                    - properties:
                        action:
                          enum:
                            - search
                message:
                  type: object
                  description: The search data using which registry search to be performed
                  oneOf:
                    - $ref: '#/components/schemas/EnrollmentUpdatesRequest'
                    - $ref: '#/components/schemas/EncryptedMessage'
              required:
                - header
                - message
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/FileInfo'
                - properties:
                    action:
                      enum:
                        - search
      responses:
        '401':
          $ref: '#/components/responses/HttpErrorResponse'
        '403':
          $ref: '#/components/responses/HttpErrorResponse'
        '500':
          $ref: '#/components/responses/HttpErrorResponse'
        default:
          description: enrollment updates response
          content:
            application/json:
              schema:
                type: object
                properties:
                  signature:
                    $ref: '#/components/schemas/MsgSignature'
                  header:
                    allOf:
                      - $ref: '#/components/schemas/MsgCallbackHeader_V1.0.0'
                      - properties:
                          action:
                            enum:
                              - on-search
                  message:
                    type: object
                    oneOf:
                      - $ref: '#/components/schemas/EnrollmentUpdatesResponse'
                      - $ref: '#/components/schemas/EncryptedMessage'
                required:
                  - header
      deprecated: false
  /registry/sync/enrolled:
    post:
      summary: /registry/sync/enrolled
      description: check if member is registered in a program as beneficiary
      operationId: post_reg_enrolled
      tags:
        - Sync
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                signature:
                  $ref: '#/components/schemas/MsgSignature'
                header:
                  allOf:
                    - $ref: '#/components/schemas/MsgHeader_V1.0.0'
                    - properties:
                        action:
                          enum:
                            - search
                message:
                  type: object
                  description: The search data using which registry search to be performed
                  oneOf:
                    - $ref: '#/components/schemas/EnrolledRequest'
                    - $ref: '#/components/schemas/EncryptedMessage'
              required:
                - header
                - message
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/FileInfo'
                - properties:
                    action:
                      enum:
                        - search
      responses:
        '401':
          $ref: '#/components/responses/HttpErrorResponse'
        '403':
          $ref: '#/components/responses/HttpErrorResponse'
        '500':
          $ref: '#/components/responses/HttpErrorResponse'
        default:
          description: support response
          content:
            application/json:
              schema:
                type: object
                properties:
                  signature:
                    $ref: '#/components/schemas/MsgSignature'
                  header:
                    allOf:
                      - $ref: '#/components/schemas/MsgCallbackHeader_V1.0.0'
                      - properties:
                          action:
                            enum:
                              - on-search
                  message:
                    type: object
                    oneOf:
                      - $ref: '#/components/schemas/EnrolledResponse'
                      - $ref: '#/components/schemas/EncryptedMessage'
                required:
                  - header
      deprecated: false
components:
  schemas:
    cdpi_PersonId:
      type: string
      description: |
        1. Person id is case insensitve normative represenation as id-type:id@provider <br>
        2. This will enumerate foundational and functioanl id's to easily resolvable addressess <br>
        3. This property is intended to unambiguously refer to an object, such as a person, beneficiary, user, etc., <br>
        4. Few examples: <br>
            - id@identifier-type.id-provider e.g token:12345@nid, vid:543215@nid <br>
            - id@civil-registry.issuing-agency e.g id:12345@civil-reg, brn:12345@civil-reg, mrn:12345@civil-reg <br>
            - id@functional-identifier.issuing-agency e.g id:12345@voter-id, id:12345@driving-license, mobile:12345@farmer-reg <br>
        Note: id provider should be made configurable and solutions should adapt to the local jurisdiction and policies.
      format: '^[a-zA-Z0-9.-]+@[a-zA-Z0-9.-]+$'
      example: 'vid:54321@nid'
    dci_Person:
      type: object
      description: |
        @context: https://schema.spdci.org/CRVSPerson" <br>
        @type: "Consent"
      example:
        '@context': 'https://standards.spdci.org/schemas/extensions/dci/v1/Person'
        '@type': CRVSPerson
        '@vocab': 'https://spdci.org/'
        schema: 'http://schema.org/'
        rdfs: 'http://www.w3.org/2000/01/rdf-schema#'
        xsd: 'http://www.w3.org/2001/XMLSchema#'
        CRVSPerson:
          '@id': 'https://spdci.org/schemas/extensions/dci/v1/Person'
          '@type': 'rdfs:Class'
          '@context':
            name:
              '@id': 'schema:name'
              '@type': 'xsd:string'
            givenName:
              '@id': 'schema:givenName'
              '@type': 'xsd:string'
            familyName:
              '@id': 'schema:familyName'
              '@type': 'xsd:string'
            additionalName:
              '@id': 'schema:additionalName'
              '@type': 'xsd:string'
            gender:
              '@id': 'schema:gender'
              '@type': 'xsd:string'
            birthDate:
              '@id': 'schema:birthDate'
              '@type': 'xsd:date'
            birthPlace:
              '@id': 'schema:birthPlace'
              '@type': 'schema:GeoCoordinates'
            deathDate:
              '@id': 'schema:deathDate'
              '@type': 'xsd:date'
            deathPlace:
              '@id': 'schema:deathPlace'
              '@type': 'schema:GeoCoordinates'
            maritalStatus:
              '@id': 'schema:maritalStatus'
              '@type': 'xsd:string'
            honorificPrefix:
              '@id': 'schema:honorificPrefix'
              '@type': 'xsd:string'
            honorificSuffix:
              '@id': 'schema:honorificSuffix'
              '@type': 'xsd:string'
            emails:
              '@container': '@set'
              '@id': 'schema:email'
              '@type': 'xsd:string'
            telephones:
              '@container': '@set'
              '@id': 'schema:telephone'
              '@type': 'xsd:string'
            address:
              '@id': 'schema:address'
              '@type': 'schema:GeoCoordinates'
            marriageDate:
              '@id': 'https://spdci.org/marriageDate'
              '@type': 'xsd:date'
            divorceDate:
              '@id': 'https://spdci.org/divorceDate'
              '@type': 'xsd:date'
            parents:
              '@id': 'schema:parents'
              '@type': 'https://spdci.org/CRVSPerson'
        '@id': 'https://spdci.org/CRVSPerson'
    dci_IdentifierType:
      type: string
      description: |
        An identifier type includes unique numbers legally assigned to individuals. <br>
        Reference: [Types of ID](https://id4d.worldbank.org/guide/types-id-systems)

        UIN : Unique Identification Number <br>
        BRN : Birth Registration Number or Birth Serial Number <br>
        MRN : Marriage Registration Number <br>
        DRN : Death Registration Number <br>
      enum:
        - UIN
        - BRN
        - MRN
        - DRN
    dci_IdentifierTypeValue:
      type: object
      properties:
        identifier_type:
          $ref: '#/components/schemas/dci_IdentifierType'
        identifier_value:
          type: string
          description: Value of the identifier
    dci_MaritalStatus:
      type: string
      description: |
        Marital status reference database: Standardized codes/values representing different marital status categories <br>
        Reference: [FHIR Marital Status](https://hl7.org/fhir/DSTU2/valueset-marital-status.html)<br>

        Code : Values - Description <br>
        S : Never Married - No marriage contract has ever been entered <br>
        M : Married - A current marriage contract is active <br>
        W : Widow - The spouse has died <br>
        A : Annulled - Marriage contract has been declared null and to not have existed <br>
        D : Divorced - Marriage contract has been declared dissolved and inactive <br>
        L : Legally Separated - Legally Separated <br>
        U : Unmarried - The person is not presently married. The marital history is not known or stated. <br>
      enum:
        - S
        - M
        - W
        - A
        - D
        - L
        - U
    dci_Name:
      type: object
      description: |
        The name data object represents a person's name with various components. <br>
        Reference: [FHIR XPN - extended person name](https://v2plus.hl7.org/2021Jan/data-type/XPN.html#XPN-1) <br>
        Note: Note: In some cultures, people can have multiple Surname(s), Given name(s), Second name(s), Suffix(s), or Prefix(s) to their name; all can be present in the respective attributes, being separated by separator character like space or /.
      properties:
        sur_name:
          type: string
          description: Surname(s) or last name(s) of the applicant
        given_name:
          type: string
          description: Given name(s) or first name(s) of the applicant
        second_name:
          type: string
          description: Second name(s) or middle name(s) of the applicant
        suffix:
          type: string
          description: Suffix part of the applicant's name
        prefix:
          type: string
          description: Prefix part of the applicant's name
    dci_PersonRecord:
      description: |
        1. Attributes of a person to create fetch records, create verifiable credentials or use in search criteria.
        3. Allowes Country/Registry specific implementation extensions using Attribute Name/Value pairs.
      properties:
        identifier_type:
          $ref: '#/components/schemas/dci_IdentifierType'
        identifier:
          type: string
          description: Value of the identifier
        name:
          $ref: '#/components/schemas/dci_Name'
        phone_number:
          description: 'Applicant preferred phone number as in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I/en)'
          type: string
        phone_number_verified:
          description: True if the End-User's phone number has been verified; otherwise false.
          type: string
        email:
          description: 'Applicant preferred e-mail address as in [RFC 5322](https://datatracker.ietf.org/doc/html/rfc5322) [addr-spec](https://datatracker.ietf.org/doc/html/rfc5322#section-3.4.1) [specification](https://datatracker.ietf.org/doc/html/rfc5322#section-3.4.1)'
          type: string
        email_verified:
          description: 'Email address was controlled by the End-User at the time the verification was performed. The means by which an e-mail address is verified is context-specific, and dependent upon the trust framework or contractual agreements within which the parties are operating.'
          type: boolean
        sex:
          $ref: '#/components/schemas/dci_Sex'
        birthdate:
          description: 'Represents Date and time of the applicant''s birth as in [ISO 8601](https://www.iso.org/standard/40874.html)'
          type: string
        birthplace:
          $ref: '#/components/schemas/dci_PersonRecord/properties/address'
        deathdate:
          $ref: '#/components/schemas/DateTime'
        deathplace:
          $ref: '#/components/schemas/dci_PersonRecord/properties/address'
        address:
          title: Address
          type: object
          description: 'Address info as per OpenID <a href="https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim">specs</a>'
          properties:
            address_line1:
              description: 'Full mailing address, formatted for display or use on a mailing label. This field MAY contain multiple lines, separated by newlines. Newlines can be represented either as a carriage return/line feed pair ("\r\n") or as a single line feed character ("\n").'
              type: string
              example: ''
            address_line_2:
              description: 'Full street address component, which MAY include house number, street name, Post Office Box, and multi-line extended street address information. This field MAY contain multiple lines, separated by newlines. Newlines can be represented either as a carriage return/line feed pair ("\r\n") or as a single line feed character ("\n").'
              type: string
              example: ''
            locality:
              description: City or locality component.
              type: string
              example: ''
            sub_region_code:
              description: District or sub-regional code
              type: string
            region_code:
              description: 'State, province, prefecture, or region component.'
              type: string
              example: ''
            postal_code:
              description: Zip code or postal code component.
              type: string
              example: ''
            country_code:
              description: 'Country part of an address represented using an ISO 3-letter code [ISO3166-3], e.g., "USA" or "JPN". 2-letter ISO codes [ISO3166-1] e.g. ,e.g. US, JP'
              type: string
              example: ''
            geo_location:
              description: |
                Refer [Plus Codes](https://github.com/google/open-location-code/wiki/Plus-codes-API) for more details
              oneOf:
                - $ref: '#/components/schemas/LatLong'
                - type: object
                  description: 'Refer [Plus Codes](https://github.com/google/open-location-code/wiki/Plus-codes-API) for more details'
                  properties:
                    global_code:
                      type: string
                      example: ''
                    geometry:
                      type: object
                      properties:
                        bounds:
                          type: object
                          properties:
                            northeast:
                              $ref: '#/components/schemas/LatLong'
                            southwest:
                              $ref: '#/components/schemas/LatLong'
                        location:
                          $ref: '#/components/schemas/LatLong'
        marital_status:
          $ref: '#/components/schemas/dci_MaritalStatus'
        marriagedate:
          $ref: '#/components/schemas/DateTime'
        divorcedate:
          $ref: '#/components/schemas/DateTime'
        parent1_identifier:
          type: object
          properties:
            identifier_type:
              $ref: '#/components/schemas/dci_IdentifierType'
            identifier:
              type: string
              description: Value of the identifier
        parent2_identifier:
          type: object
          properties:
            identifier_type:
              $ref: '#/components/schemas/dci_IdentifierType'
            identifier:
              type: string
              description: Value of the identifier
    dci_RecordType:
      type: string
      description: |
        Predefined registry record to return in respone as object
      enum:
        - person
        - other
    dci_Sex:
      type: string
      description: |
        Standardized codes/values representing diverse Sex categories.
        Reference: [FHIR Administrative Gender](https://build.fhir.org/valueset-administrative-gender.html)
        1 : Male
        2 : Female
        3 : Others
        4 : Unknown
      enum:
        - male
        - female
        - other
        - unknown
    dci_VitalEvents:
      type: string
      description: |
        Standardized codes/values represent vital events in an individual's life. 
        Reference: [Vital Events Statistics](https://mospi.gov.in/sites/default/files/publication_reports/vital_statistics_2010_0.pdf)<br>
        1 : Live Birth <br>
        2 : Death <br>
        3 : Fetal death <br>
        4 : Marriage <br>
        5 : Divorce <br>
        6 : Adoption <br>
      enum:
        - live_birth
        - death
        - fetal_death
        - marriage
        - divorce
        - adoption
    NotifyEventRequest:
      type: object
      description: Registry to notify a event to subscrbiers
      properties:
        transaction_id:
          $ref: '#/components/schemas/TransactionId'
        notify_event:
          type: array
          items:
            type: object
            properties:
              reference_id:
                $ref: '#/components/schemas/ReferenceId'
              timestamp:
                $ref: '#/components/schemas/DateTime'
              data:
                type: object
                description: |
                  Registry data being notified as an outcome of event subscription with registry
                properties:
                  version:
                    type: string
                    default: 1.0.0
                  reg_type:
                    $ref: '#/components/schemas/SubscriptionInfo/properties/reg_type'
                  reg_record_type:
                    $ref: '#/components/schemas/RegistryRecordType'
                  reg_records:
                    $ref: '#/components/schemas/RegistryRecord'
                required:
                  - reg_record_type
                  - reg_records
              locale:
                $ref: '#/components/schemas/LanguageCode'
            required:
              - reference_id
              - timestamp
              - data
      required:
        - transaction_id
        - notify_event
    RegistryEventType:
      type: string
      description: |
        The IBR receive data from SP system , it has to differenciate of details based on event type, Usually SP system sends enrollement and enrollement status change events to IBR

        1 : enrollement <br>
        2 : enrollement_status_change <br>
        3 : Deregister <br>  
      enum:
        - enrollement
        - enrollement_status_change
    RegistryRecord:
      type: object
      description: |
        The "person" object contains fields expected in response of search
        @context: https://schema.spdci.org/extensions/dci/v1/Person.jsonld <br>
        @type: "Person" <br>
        @container: "@set" <br> 
      example:
        $ref: '#/components/schemas/dci_Person'
    RegistryRecordType:
      type: string
      description: |
        @context: https://schema.spdci.org/common/v1/RegistryRecordType.jsonld <br>
        @type: "RegistryRecordType" <br>

        **Notes:**
          1. Registry record type values defined as per implementation context.
          2. Usually a list of **enum** values of all possible queryable result sets 
          3. Referenced in search_request and notify events
          4. example: "spdci-extensions-dci:Person" 
      example: 'spdci-extensions-dci:Person'
    RegistryType:
      type: string
      description: |
        @context: https://schema.spdci.org/common/v1/RegistryType.jsonld <br>
        @type: "RegistryType" <br>

        **Notes:**
          1. Registry type values defined as per implementation context.
          2. Usually a list of **enum** values of all possible queryable functional registries 
          3. example: "ns:org:RegistryType:IBR"
      example: 'ns:org:RegistryType:IBR'
    SearchRequest:
      type: object
      description: |
        1. Functional registry specific extension to search.
        2. Additional checks using conditional expressions is possible.
        3. Allows Country/Registry specific implementation extensions using key/value pairs.
      properties:
        transaction_id:
          $ref: '#/components/schemas/TransactionId'
        search_request:
          type: array
          description: |
            1. Batch requests enable multiple individual requests with respective consent/authorize codes
          items:
            type: object
            properties:
              reference_id:
                $ref: '#/components/schemas/ReferenceId'
              timestamp:
                $ref: '#/components/schemas/DateTime'
              search_criteria:
                type: object
                properties:
                  version:
                    type: string
                    default: 1.0.0
                  reg_event_type:
                    $ref: '#/components/schemas/RegistryEventType'
                  query_type:
                    type: string
                    description: |
                      1. Query format allow multiple ways to search registry
                      2. Templatized query expressions with placeholder for conditional values
                    enum:
                      - idtype-value
                      - expression
                      - predicate
                    example: expression
                  query:
                    description: |
                      1. Implementing systems can define schemas.
                      2. Based on context, pre defined named queries can also help as part of ExpTemplate construct.
                      3. ExpressionWithConditionList is simple generic search query construct to solve for majority of search conditons. few examples: <br>
                        - search or subscribe to update events; e.g any updates in postal_code 12345 between 1/jan/2020 and 31/dec/2020
                        - search or subscribe to birth, death events; e.g any new birth in postal_code 12345 after 1/jan/2023
                    oneOf:
                      - type: object
                        description: Identifier type and value object
                        properties:
                          type:
                            type: string
                            description: |
                              @context: https://schema.spdci.org/common/v1/QueryTypeEnum.jsonld <br>
                              @type: "QueryType" <br>

                              **Notes:**
                                1. Query types that helps decode query expressions
                                2. Sample query type enums: "GraphQl", "Sql", "NoSql"
                            example: 'ns:org:QueryType:NoSql'
                          value:
                            type: object
                            description: |
                              @context: https://schema.spdci.org/common/v1/QueryExpression.jsonld <br>
                              @type: "QueryExpression" <br>

                              **Notes:**
                                1. Query expression's syntax / format is determined based on query-type.
                                2. Query expression as a template with placeholder to pass conditional search parameters
                            example:
                              expression:
                                collection: Group
                                query:
                                  $and:
                                    - poverty_score:
                                        $lt: 5
                                    - location:
                                        $eq: central_region
                                    - group_size:
                                        $lt: 5
                      - $ref: '#/components/schemas/IdentifierTypeValue'
                      - $ref: '#/components/schemas/ExpPredicateWithConditionList'
                  sort:
                    $ref: '#/components/schemas/SearchSortList'
                  pagination:
                    $ref: '#/components/schemas/PaginationRequest'
                  consent:
                    $ref: '#/components/schemas/Consent'
                  authorize:
                    $ref: '#/components/schemas/Authorize'
                required:
                  - query_type
                  - query
              locale:
                $ref: '#/components/schemas/LanguageCode'
            required:
              - reference_id
              - timestamp
              - search_criteria
      required:
        - transaction_id
        - search_request
    SearchResponse:
      type: object
      description: Response to search request. Multiple repsonses for each page can be pushed to the caller as an implementation!
      properties:
        transaction_id:
          $ref: '#/components/schemas/TransactionId'
        correlation_id:
          description: |
            1. correlation_id acknowledged by end txn processing system (i.e receiver) to co-relate all related requests in the context of a business transaction.
            2. correlation_id uniqueness is ensured by txn processing system (i.e receiver)
          type: string
          maxLength: 99
          example: '9876543210'
        search_response:
          type: array
          items:
            type: object
            properties:
              reference_id:
                $ref: '#/components/schemas/ReferenceId'
              timestamp:
                $ref: '#/components/schemas/DateTime'
              status:
                $ref: '#/components/schemas/RequestStatus'
              status_reason_code:
                $ref: '#/components/schemas/SearchStatusReasonCode'
              status_reason_message:
                description: Status reason code message. Helps actionable messaging for systems/end users
                type: string
                maxLength: 999
              data:
                type: object
                description: |
                  Search result record as an outcome of search/subscribe action
                properties:
                  version:
                    type: string
                    default: 1.0.0
                  reg_records:
                    description: |
                      The "Beneficiary" object contains fields expected in response of search
                      @context: https://schema.spdci.org/extensions/ibr/v1/Beneficiary.jsonld <br>
                      @type: "@context" <br>
                      @container: "@set" <br>
                    type: array
                    items:
                      type: object
                      description: |
                        1. Attributes of a person to create fetch records, create verifiable credentials or use in search criteria.
                        3. Allows Country/Registry specific implementation extensions using Attribute Name/Value pairs.

                        @context: https://schema.spdci.org/extensions/ibr/v1/Beneficairy.jsonld <br>
                        @type: "@context" <br>
                      example:
                        '@context':
                          '@vocab': 'https://schema.spdci.org/extensions/ibr/v1'
                          xsd: 'http://www.w3.org/2001/XMLSchema#'
                          schema: 'http://schema.org/'
                          rdfs: 'http://www.w3.org/2000/01/rdf-schema#'
                          owl: 'http://www.w3.org/2002/07/owl#'
                        '@id': Beneficiary
                        '@type': Beneficiary
                        assistance_unit: '1'
                        member:
                          member_identifier: HS0205202401
                          demographic_info:
                            person:
                              identifier_type: NID
                              identifier_value: '0205202401'
                              name:
                                first_name: Test
                                second_name: Test2
                                surname: Test3
                              sex: F
                              birth_date: 02.05.2004
                              death_date: ''
                              address: ''
                              phone_number: ''
                              email: ''
                          relationship_head: ''
                          related_person: ''
                          is_disabled: '0'
                          disability_info: ''
                          marital_status: Single
                          employment_status: employed
                          occupation: Caregiver
                          income_level: ''
                          language_code: Eng
                          education_level: Highschool
                          additional_attributes: ''
                          registration_date: 02.05.2024
                          last_update: ''
                          programme_identifier:
                            programme:
                              programme_identifier: DCI001
                              programme_name: Test Programme
                            enrolment_date: 02.02.2024
                            enrolment_status: Active
                            status_change_date: ''
                            benefits:
                              benefit_type: Cash
                              benefit_date: 02.05.2024
                              benefit_value: USD 50
                              benefit_frequency: Monthly
                required:
                  - reg_records
              pagination:
                $ref: '#/components/schemas/Pagination'
              locale:
                $ref: '#/components/schemas/LanguageCode'
            required:
              - reference_id
              - timestamp
              - status
      required:
        - transaction_id
        - correlation_id
        - search_response
    SearchStatusReasonCode:
      type: string
      description: Identity verification request status reason codes
      enum:
        - rjct.reference_id.invalid
        - rjct.reference_id.duplicate
        - rjct.timestamp.invalid
        - rjct.search_criteria.invalid
        - rjct.filter.invalid
        - rjct.sort.invalid
        - rjct.pagination.invalid
        - rjct.search.too_many_records_found
    SubscribeRequest:
      type: object
      description: Subscribe to a life event with crvs
      properties:
        transaction_id:
          $ref: '#/components/schemas/TransactionId'
        subscribe_request:
          type: array
          items:
            type: object
            properties:
              reference_id:
                $ref: '#/components/schemas/ReferenceId'
              timestamp:
                $ref: '#/components/schemas/DateTime'
              subscribe_criteria:
                type: object
                properties:
                  version:
                    type: string
                    default: 1.0.0
                  reg_type:
                    $ref: '#/components/schemas/RegistryType'
                  reg_event_type:
                    $ref: '#/components/schemas/RegistryEventType'
                  frequency:
                    $ref: '#/components/schemas/EventFrequency'
                  filter_type:
                    $ref: '#/components/schemas/QueryType'
                  filter:
                    $ref: '#/components/schemas/SubscriptionInfo/properties/filter'
                  notify_record_type:
                    type: string
                    description: |
                      @context: https://schema.spdci.org/extensions/ibr/v1/Person.jsonld <br>
                      @type: "RegistryRecordType" <br>

                      **Notes:**
                        1. Registry record type values defined as per implementation context.
                        2. Usually a list of **enum** values of all possible queryable result sets 
                        3. Referenced in search_request and notify events
                        4. example: "Person" 
                    example: Person
                  authorize:
                    $ref: '#/components/schemas/Authorize'
                required:
                  - reg_event_type
                  - filter
                  - notify_record_type
              locale:
                $ref: '#/components/schemas/LanguageCode'
            required:
              - reference_id
              - timestamp
              - subscribe_criteria
      required:
        - transaction_id
        - subscribe_request
    SubscribeResponse:
      type: object
      description: Response to subscribe request.
      properties:
        transaction_id:
          $ref: '#/components/schemas/TransactionId'
        correlation_id:
          $ref: '#/components/schemas/SearchResponse/properties/correlation_id'
        subscribe_response:
          type: array
          items:
            type: object
            properties:
              reference_id:
                $ref: '#/components/schemas/ReferenceId'
              timestamp:
                $ref: '#/components/schemas/DateTime'
              status:
                $ref: '#/components/schemas/RequestStatus'
              status_reason_code:
                $ref: '#/components/schemas/SubscribeStatusReasonCode'
              status_reason_message:
                description: Status reason code message. Helps actionanble messaging for systems/end users
                type: string
                maxLength: 999
              subscriptions:
                type: array
                items:
                  type: object
                  properties:
                    version:
                      type: string
                      default: 1.0.0
                    code:
                      $ref: '#/components/schemas/SubscriptionCode'
                    status:
                      $ref: '#/components/schemas/SubscriptionStatus'
                    timestamp:
                      $ref: '#/components/schemas/DateTime'
                    reg_type:
                      $ref: '#/components/schemas/RegistryType'
                    reg_event_type:
                      $ref: '#/components/schemas/RegistryEventType'
                    frequency:
                      $ref: '#/components/schemas/EventFrequency'
                    filter_type:
                      $ref: '#/components/schemas/QueryType'
                    filter:
                      $ref: '#/components/schemas/SubscriptionInfo/properties/filter'
                    notify_record_type:
                      $ref: '#/components/schemas/SubscribeRequest/properties/subscribe_request/items/properties/subscribe_criteria/properties/notify_record_type'
                      required:
                        - reg_event_type
                        - filter
                        - notify_record_type
                    locale:
                      $ref: '#/components/schemas/LanguageCode'
                  required:
                    - subscription_code
                    - timestamp
                    - subscribe_criteria
              locale:
                $ref: '#/components/schemas/LanguageCode'
            required:
              - reference_id
              - timestamp
              - status
      required:
        - transaction_id
        - correlation_id
        - subscribe_response
    SubscribeStatusReasonCode:
      type: string
      description: Identity verification request status reason codes
      enum:
        - rjct.reference_id.invalid
        - rjct.reference_id.duplicate
        - rjct.timestamp.invalid
        - rjct.notify_types.invalid
        - rjct.notify_details.invalid
        - rjct.person_id.invalid
        - rjct.event.already_subscribed
    SubscriptionCode:
      type: string
      description: |
        Unique code to identify the subscription request by the entity providing subscription service.
        Helps to check status, unsubscribe etc.,
      maxLength: 99
    SubscriptionCodeList:
      items:
        $ref: '#/components/schemas/SubscriptionCode'
    SubscriptionInfo:
      type: object
      properties:
        version:
          type: string
          default: 1.0.0
        code:
          $ref: '#/components/schemas/SubscriptionCode'
        status:
          $ref: '#/components/schemas/SubscriptionStatus'
        timestamp:
          $ref: '#/components/schemas/DateTime'
        reg_type:
          type: string
          description: |
            @context: https://schema.spdci.org/common/v1/RegistryType.jsonld <br>
            @type: "@context" <br>

            **Notes:**
              1. Registry type values defined as per implementation context.
              2. Usually a list of **enum** values of all possible queryable functional registries 
              3. example: "ns:org:RegistryType:Civil"
          example: 'ns:org:RegistryType:Civil'
        reg_event_type:
          type: string
          description: |
            @context: https://schema.spdci.org/common/v1/RegistryEventTypeEnum.jsonld <br>
            @type: "VitalEvent" <br>

            **Notes:**
              1. Registry event type values defined as per implementation context.
              2. Usually a list of **enum** values of all possible queryable identifiers.
              3. example: "spdci-common:RegistryEventType:LiveBirth"
          example: 'spdci-common:RegistryEventType:LiveBirth'
        frequency:
          $ref: '#/components/schemas/EventFrequency'
        filter_type:
          $ref: '#/components/schemas/QueryType'
        filter:
          description: |
            1. Implementing systems can define schemas.
            2. Based on context, pre defined named queries can also help as part of ExpTemplate construct.
            3. ExpressionWithConditionList is simple generic search query construct to solve for majority of search conditons. few examples: <br>
              - search or subscribe to update events; e.g any updates in postal_code 12345 between 1/jan/2020 and 31/dec/2020
              - search or subscribe to birth, death events; e.g any new birth in postal_code 12345 after 1/jan/2023
          oneOf:
            - type: object
              description: Identifier type and value object
              properties:
                type:
                  type: string
                  description: |
                    @context: https://schema.spdci.org/common/v1/QueryTypeEnum.jsonld <br>
                    @type: "QueryType" <br>

                    **Notes:**
                      1. Query types that helps decode query expressions
                      2. Sample query type enums: "GraphQl", "Sql", "NoSql"
                  example: 'ns:org:QueryType:GraphQl'
                value:
                  type: object
                  description: |
                    @context: https://schema.spdci.org/common/v1/QueryExpression.jsonld <br>
                    @type: "QueryExpression" <br>

                    **Notes:**
                      1. Query expression's syntax / format is determined based on query-type.
                      2. Query expression as a template with placeholder to pass conditional search parameters
                  example:
                    expression: ' query GeBirthRecordById: { person: (UIN: "1") { BRN, name, gender, birthDate, birthPlace, parents } } '
            - $ref: '#/components/schemas/IdentifierTypeValue'
            - $ref: '#/components/schemas/ExpPredicateWithConditionList'
        notify_record_type:
          $ref: '#/components/schemas/RegistryRecordType'
          required:
            - reg_event_type
            - filter
            - notify_record_type
        locale:
          $ref: '#/components/schemas/LanguageCode'
      required:
        - subscription_code
        - timestamp
        - subscribe_criteria
    SubscriptionStatus:
      type: string
      description: subscription status
      enum:
        - subscribe
        - unsubscribe
    UnSubscribeRequest:
      type: object
      description: Un-Subscribe to registred subscriptions
      properties:
        transaction_id:
          $ref: '#/components/schemas/TransactionId'
        timesstamp:
          $ref: '#/components/schemas/DateTime'
        subscription_codes:
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionCode'
      required:
        - transaction_id
        - timestamp
        - sunscription_codes
    UnSubscribeResponse:
      type: object
      description: Un-Subscribe to a life event with crvs
      properties:
        transaction_id:
          $ref: '#/components/schemas/TransactionId'
        correlation_id:
          $ref: '#/components/schemas/SearchResponse/properties/correlation_id'
        timesatmp:
          $ref: '#/components/schemas/DateTime'
        status:
          $ref: '#/components/schemas/RequestStatus'
        status_reason_code:
          $ref: '#/components/schemas/UnSubscribeStatusReasonCode'
        status_reason_message:
          description: Status reason code message. Helps actionanble messaging for systems/end users
          type: string
          maxLength: 999
        subscription_status:
          type: array
          items:
            type: object
            properties:
              code:
                $ref: '#/components/schemas/SubscriptionCode'
              status:
                $ref: '#/components/schemas/SubscriptionStatus'
            required:
              - code
              - status
      required:
        - transaction_id
        - correlation_id
        - timestamp
        - status
    UnSubscribeStatusReasonCode:
      type: string
      description: Identity verification request status reason codes
      enum:
        - rjct.reference_id.invalid
        - rjct.reference_id.duplicate
        - rjct.timestamp.invalid
        - rjct.subscription_code.invalid
        - rjct.requester.invalid
        - rjct.event.already_unsubscribed
    EnrollmentUpdatesRequest:
      type: object
      description: Registry to notify a event to subscrbiers
      properties:
        transaction_id:
          $ref: '#/components/schemas/TransactionId'
        enrolled_updates:
          type: object
          description: |
            Receipt information contains receipt type and list of beneficiaries
            1) Enrolled beneficiaries - It return the beneficiaries enrolled  into system.
            2) Updated beneficiaries - If return updated status
          properties:
            beneficiaries:
              type: array
              description: |
                1. Attributes of a person to create fetch records, create verifiable credentials or use in search criteria.
                2. Allows Country/Registry specific implementation extensions using Attribute Name/Value pairs.
                @context: https://schema.spdci.org/extensions/ibr/v1/Beneficiary.jsonld <br>
                @type: "@context" <br>   
              items:
                $ref: '#/components/schemas/SearchResponse/properties/search_response/items/properties/data/properties/reg_records/items'
      required:
        - transaction_id
        - enrolled_updates
    EnrollmentUpdatesResponse:
      type: object
      description: Response to subscribe request.
      properties:
        transaction_id:
          $ref: '#/components/schemas/TransactionId'
        correlation_id:
          $ref: '#/components/schemas/SearchResponse/properties/correlation_id'
        enrolled_response:
          type: array
          items:
            type: object
            properties:
              reference_id:
                $ref: '#/components/schemas/ReferenceId'
              timestamp:
                $ref: '#/components/schemas/DateTime'
              status:
                $ref: '#/components/schemas/RequestStatus'
              status_reason_message:
                description: Status reason code message. Helps actionanble messaging for systems/end users
                type: string
                maxLength: 999
            required:
              - reference_id
              - timestamp
              - status
      required:
        - transaction_id
        - correlation_id
        - enrolled_response
    EnrolledRequest:
      type: object
      description: Registry to notify a event to subscribers
      properties:
        transaction_id:
          $ref: '#/components/schemas/TransactionId'
        enrolled_criteria:
          type: object
          description: |
            Enrolled query
          properties:
            query_type:
              $ref: '#/components/schemas/QueryType'
              description: ''
            response_entity:
              example: Beneficiary
              type: string
              description: |
                Define the type of response to have when executing the search
              enum:
                - Group
                - Member
            query:
              type: object
              description: Query expression for the enrolled query
              example:
                person_identifier:
                  eq: ABC451123
                programme_identifier.program.programme_identifier:
                  eq: DCI001
      required:
        - transaction_id
        - enrolled_criteria
    EnrolledResponse:
      type: object
      description: Response to verify enrollment status request.
      properties:
        transaction_id:
          $ref: '#/components/schemas/TransactionId'
        correlation_id:
          $ref: '#/components/schemas/SearchResponse/properties/correlation_id'
        enrolled_response:
          type: array
          items:
            type: object
            properties:
              reference_id:
                $ref: '#/components/schemas/ReferenceId'
              timestamp:
                $ref: '#/components/schemas/DateTime'
              status:
                $ref: '#/components/schemas/RequestStatus'
              status_reason_message:
                description: Status reason code message. Helps actionable messaging for systems/end users
                type: string
                maxLength: 999
              enrolled_status:
                description: Indicates whether the individual is registered as beneficiary ('yes') or not ('no').
                type: string
                enum:
                  - 'yes'
                  - 'no'
            required:
              - reference_id
              - timestamp
              - status
              - enrolled_status
      required:
        - transaction_id
        - correlation_id
        - enrolled_response
    Ack:
      type: string
      description: |
        1. ACK: If the request is valid (for basic checks) and async callback (i.e webhook) will be invoked by reciever back to the sender.
        2. NACK: If the request is valid (for basic checks) and there is no futher updates from reciever back to the sender.
        3. ERR: If the reuqest is invalid and reciver can't process the request. error object holds error code, message.
      enum:
        - ACK
        - NACK
        - ERR
    AdditionalInfo:
      type: object
      description: Additional JSON property oject to hold custom user defined contextual data
    AttributeNameValue:
      $re f: ../common/schema/AttributeNameValue.yaml
    AttributeNameValueList:
      type: array
      description: List of attribute Name/Value
      items:
        type: object
        description: Attribute name value object
        properties:
          name:
            type: string
            description: |
              @context: https://schema.spdci.org/common/v1/attribute.jsonld <br>
              @type: "Attribute" <br>

              **Notes:**
                1. Attribute names defined as per implementation context.
                2. Usually a list of **enum** values of all possible attribute names.
                3. e.g: UIN, YOB, DOB, age, mobile, area-code, pin-code, etc.,
            example: YOB
          value:
            $ref: '#/components/schemas/AttributeValue'
        required:
          - name
          - value
    AttributeValue:
      oneOf:
        - type: string
        - type: integer
        - type: number
        - type: boolean
        - type: object
      example: '1980'
    Authorize:
      type: object
      description: |
        @context: https://schema.spdci.org/Authorize <br>
        @type: "Authorize"
      example:
        '@context': 'https://standards.spdci.org/schemas/Authorize'
        '@type': Authorize
        ts:
          $ref: '#/components/schemas/DateTime'
        purpose:
          text:
            type: string
          code:
            type: string
            description: 'From a fixed set, documented at refUri'
          ref_uri:
            type: string
            format: uri
            description: Uri to provide more info on authorize codes
    Consent:
      type: object
      description: |
        @context: https://schema.spdci.org/Consent" <br>
        @type: "Consent"
      example:
        '@context': 'https://standards.spdci.org/schemas//Consent'
        '@type': Consent
        ts:
          $ref: '#/components/schemas/DateTime'
        purpose:
          text:
            type: string
          code:
            type: string
            description: 'From a fixed set, documented at refUri'
          ref_uri:
            type: string
            format: uri
            description: Uri to provide more info on consent codes
    DateTime:
      description: |
        1. All dates and timestamps are represented in [ISO 8601](https://www.iso.org/standard/40874.html) format including timezone - e.g 2022-12-04T17:20:07-04:00.
      type: string
      format: date-time
      example: ''
    EncryptedMessage:
      description: Encrypted payload
      type: object
      properties:
        header:
          type: object
          properties:
            alg:
              type: string
              description: The JWE algorithm used for encryption
            enc:
              type: string
              description: The encryption algorithm used for encrypting the plaintext
            kid:
              type: string
              description: The key identifier for the encryption key
          required:
            - alg
            - enc
            - kid
        ciphertext:
          type: string
          description: This is the result of encrypting the plaintext using the CEK and the IV. It's Base64Url-encoded.
        encrypted_key:
          type: string
          description: The base64-url encoded encrypted key
        tag:
          type: string
          description: 'This is a Base64Url-encoded value that provides evidence of the integrity and authenticity of the ciphertext, Initialization Vector, and Additional Authenticated Data'
        iv:
          type: string
          description: This is a Base64Url-encoded random bit string to be used as the Initialization Vector (IV) when encrypting the plaintext to produce the ciphertext. The size of the IV depends on the encryption algorithm used.
      required:
        - header
        - ciphertext
        - encrypted_key
        - tag
        - iv
    Error:
      description: |
        Commumication layer Asyn errors that are returned as part of message acknowledgement.
        1. Messages that are not parsable or message integrity check fails.
        2. This object may be used across all transport layer protocols (https, sftp, messaging, etc,) to ack the receipt of a message.
        3. Business context and related validation is NOT in scope of this error object.
      type: object
      properties:
        code:
          type: string
          description: Standard error code
          enum:
            - err.request.bad
            - err.request.unauthorized
            - err.request.forbidden
            - err.request.not_found
            - err.request.timeout
            - err.version.not_supported
            - err.request.too_many_requests
            - err.sender_id.invalid
            - err.sender_uri.invalid
            - err.receiver_id.invalid
            - err.signature.missing
            - err.signature.invalid
            - err.encryption.invalid
            - err.service.unavailable
        message:
          type: string
          description: message to describe above error code
          maxLength: 999
    EventFrequency:
      type: object
      description: |
        1. Frequency at which subscribed services should be notified. 
        2. start_time, end_time represent data range where the notification frequency is applicable 
      properties:
        start_time:
          $ref: '#/components/schemas/DateTime'
        end_time:
          $ref: '#/components/schemas/DateTime'
        frequency:
          type: string
          description: |
            Frequency at which notification is required. This will be in the form of cron expression. 
            Example - "0 0 0 5,15 * ? *" 
            which says At 00:00:00am, on the 5th and 15th day, every month
      required:
        - start_time
        - end_time
        - frequency
    ExpCondition:
      type: string
      description: Condition in an expression
      enum:
        - and
        - or
        - not
      example: and
    ExpOperator:
      type: string
      description: Operator in an expression
      enum:
        - gt
        - lt
        - eq
        - ge
        - le
        - in
      example: eq
    ExpPredicate:
      type: object
      description: Expression
      properties:
        attribute_name:
          type: string
          description: |
            @context: https://schema.spdci.org/QueryAttributes" <br>
            @type: "QueryAttributes" <br>

            **Notes:**
              1. Query attribute names defined as per implementation context.
              2. Usually a list of **enum** values of all possible queryable attribute names.
              3. e.g: UIN, YOB, DOB, age, mobile, area-code, pin-code, etc.,
          example: YOB
        operator:
          $ref: '#/components/schemas/ExpOperator'
        attribute_value:
          $ref: '#/components/schemas/AttributeValue'
      required:
        - attribute_name
        - operator
        - attribute_value
    ExpPredicateList:
      type: array
      description: list of attributes with matching conditions
      items:
        $ref: '#/components/schemas/ExpPredicate'
    ExpPredicateWithCondition:
      type: object
      properties:
        seq_num:
          description: Sequence number to help define precedence for evaluating a list of expression Predicates
          type: number
          example: 1
        expression1:
          $ref: '#/components/schemas/ExpPredicate'
        condition:
          $ref: '#/components/schemas/ExpCondition'
        expression2:
          $ref: '#/components/schemas/ExpPredicate'
      required:
        - expression1
    ExpPredicateWithConditionList:
      type: array
      items:
        $ref: '#/components/schemas/ExpPredicateWithCondition'
    FileInfo:
      type: object
      description: File info. Used in file upload feature using HTTPS
      properties:
        action:
          description: SPDCI Connect specific actions. Usually verb from the URI should go here to help store and fwd kind of processing requirements.
          type: string
        fileName:
          description: Disbursement instruction file representing Disburse or OnDisburse end point elements i.e signature/header/message entities as a file record
          type: string
          format: binary
        fileFormat:
          description: 'File content format. e.g json, csv, etc.,'
          type: string
          default: json
          example: csv
      required:
        - action
        - fileName
    IdentifierType:
      type: string
      description: |
        @context: https://schema.spdci.org/IdType" <br>
        @type: "IdType" <br>

        **Notes:**
          1. Identifier type values defined as per implementation context.
          2. Usually a list of **enum** values of all possible queryable identifiers.
          3. e.g: UIN, MOBILE, BRN, MRN, DRN, etc., 
      example: UIN
    IdentifierTypeValue:
      type: object
      description: Identifier type and value object
      properties:
        type:
          type: string
          description: |
            @context: https://schema.spdci.org/common/v1/IdentifierTypeEnum.jsonld <br>
            @type: "IdType" <br>

            **Notes:**
              1. Identifier type values defined as per implementation context.
              2. Usually a list of **enum** values of all possible queryable identifiers.
              3. e.g: UIN, MOBILE, BRN, MRN, DRN, etc., 
          example: UIN
        value:
          allOf:
            - description: Identifier Value of the subject.
            - $ref: '#/components/schemas/AttributeValue'
          example: '12314567890'
    LanguageCode:
      type: string
      description: indicates language code. SPDCI Connect supports country codes as per ISO 639.3 standard
      pattern: '^[a-z]{3,3}$'
      example: en
    LatLong:
      type: object
      properties:
        latitude:
          type: string
          example: 11°24'12.2"N
        longitude:
          type: string
          example: 88°50'26.5"E
    Meta:
      type: object
      description: |
        @context: https://schema.spdci.org/common/v1/Meta.jsonld <br>
        @type: "@context" <br>
          
        **Notes:**
          1. Additional meta info defined as per implementation context.
          2. Usually unencrypted list of name/value, tags, etc., to provide additional info to intermediary entities.
          3. The information SHOULD be privacy preserving
    MsgCallbackHeader_V1.0.0:
      type: object
      description: Message header
      properties:
        version:
          description: Messaging protocol specification version being used
          type: string
          default: 1.0.0
        message_id:
          description: |
            1. Unique message id to communicate between sender and receiver systems to realiable deliver the message over any transport layer i.e https, pub/sub, sftp etc.,
            2. The scope of message_id end with successful ack of the message by the receiver.
            3. To realy the message between hops, underlying relying parties may consider to store and forward the message with integirty, ie Signature intact.
          type: string
          example: '789'
        message_ts:
          $ref: '#/components/schemas/DateTime'
        action:
          description: SPDCI Connect specific action. Usually verb from the URI should go here to help store and fwd kind of processing requirements.
          type: string
        status:
          $ref: '#/components/schemas/RequestStatus'
        status_reason_code:
          $ref: '#/components/schemas/MsgHeaderStatusReasonCode'
        status_reason_message:
          description: 'Status reascon code message, if any, Helps actionable messaging for system/end users'
          type: string
          maxLength: 999
        total_count:
          description: Total no of requests present in the message request
          type: integer
          example: 21800
        completed_count:
          description: No of requests in complteed state. Complete includes success and error requests due to funcational errors
          type: integer
          example: 50
        sender_id:
          description: |
            1. sender_id registered with the receiving system or gateway. 
            2. Used for authorization, encryption, digital sign verfication, etc., 
          type: string
          example: ibr.example.org
        receiver_id:
          description: 'receiver id registered with the calling system. Used for authorization, encryption, digital sign verfication, etc., functions.'
          type: string
          example: spmis.example.org
        is_msg_encrypted:
          description: Is message encrypted?
          type: boolean
          default: false
        meta:
          $ref: '#/components/schemas/Meta'
      required:
        - message_id
        - message_ts
        - action
        - status
    MsgHeader_V1.0.0:
      type: object
      description: Message header
      properties:
        version:
          description: Messaging protocol specification version being used
          type: string
          default: 1.0.0
        message_id:
          description: |
            1. Unique message id to communicate between sender and receiver systems to realiable deliver the message over any transport layer i.e https, pub/sub, sftp etc.,
            2. The scope of message_id end with successful ack of the message by the receiver.
            3. To realy the message between hops, underlying relying parties may consider to store and forward the message with integirty, ie Signature intact.
          type: string
          example: '123'
        message_ts:
          $ref: '#/components/schemas/DateTime'
        action:
          description: 'spdci Connect specific action. Usually verb from the URI. Helps in sync, async, store/fwd processing. Helps to identify payload type in message property.'
          type: string
        sender_id:
          description: |
            1. sender_id registered with the receiving system or gateway. 
            2. Used for authorization, encryption, digital sign verification, etc.,
          type: string
          example: spmis.example.org
        sender_uri:
          description: |
            1. sender url to accept callbacks. Applicable only for async communications and if response ack_status is ACK.
            2. Default uri is assumed to be configured on the gateway as part of sender/receiver onboarding. 
            3. For SFTP based communications, this shall be set to server/folder details.
          type: string
          format: uri
          example: 'https://spmis.example.org/{namespace}/callback/on-search'
        receiver_id:
          description: 'receiver id registered with the calling system. Used for authorization, encryption, digital sign verification, etc., functions.'
          type: string
          example: ibr.example.org
        total_count:
          description: Total no of requests present in the message request
          type: integer
          example: 21800
        is_msg_encrypted:
          description: Is message encrypted?
          type: boolean
          default: false
        meta:
          $ref: '#/components/schemas/Meta'
      required:
        - message_id
        - message_ts
        - action
        - sender_id
        - total_count
    MsgHeaderStatusReasonCode:
      type: string
      description: Message header related common status reason codes
      enum:
        - rjct.version.invalid
        - rjct.message_id.duplicate
        - rjct.message_ts.invalid
        - rjct.action.invalid
        - rjct.action.not_supported
        - rjct.total_count.invalid
        - rjct.total_count.limit_exceeded
        - rjct.errors.too_many
    MsgSignature:
      type: string
      description: 'Signature of {header}+{message} body verified using sender''s signing public key'
      example: 'Signature:  namespace="spdci", kidId="{sender_id}|{unique_key_id}|{algorithm}", algorithm="ed25519", created="1606970629", expires="1607030629", headers="(created) (expires) digest", signature="Base64(signing content)'
    Pagination:
      description: 'Pagination definition, count starts with 1'
      type: object
      properties:
        page_size:
          type: number
          format: int32
          example: 2000
        page_number:
          type: number
          format: int32
          example: 5
        total_count:
          type: number
          format: int32
          example: 24250
      required:
        - page_size
        - page_number
        - total_count
    PaginationRequest:
      description: 'Pagination definition, count starts with 1'
      type: object
      properties:
        page_size:
          type: number
          format: int32
          example: 2000
        page_number:
          type: number
          format: int32
          default: 1
          example: 5
      required:
        - page_size
    QueryType:
      type: string
      description: |
        1. Query format allow multiple ways to search registry
        2. Templatized query expressions with placeholder for conditional values
      enum:
        - idtype-value
        - expression
        - predicate
      example: idtype-value
    ReferenceId:
      type: string
      description: Unique reference_id set by txn initiating system for each request in a batch
      example: '12345678901234567890'
    ReferenceIdList:
      type: array
      items:
        $ref: '#/components/schemas/ReferenceId'
    RequestStatus:
      type: string
      description: 'Request (e.g disburse, link, unlink, resolve, issue, search, verify, etc.,) status: <br> 1. rcvd: Received; Request received <br> 2. pdng: Pending; Request initiated <br> 3. succ: Success; Request successful <br> 4. rjct: Rejected; Request rejected'
      enum:
        - rcvd
        - pdng
        - succ
        - rjct
    SearchSort:
      description: Sorting definition
      type: object
      properties:
        attribute_name:
          type: string
          description: |
            @context: https://schema.spdci.org/common/v1/Attribute.jsonld <br>
            @type: "Attribute" <br>

            **Notes:**
              1. Attribute names defined as per implementation context.
              2. Usually a list of **enum** values of all possible attribute names.
              3. e.g: UIN, poverty_score, etc.,
          example: poverty_score
        sort_order:
          type: string
          enum:
            - asc
            - desc
    SearchSortList:
      type: array
      items:
        $ref: '#/components/schemas/SearchSort'
    TransactionId:
      description: |
        1. transaction_id set by txn initiating system (i.e sender) to co-relate all related requests in the context of a business transaction.
        2. transaction_id should be same across processing systems/service end points.
        2. transaction_id uniqueness is ensured by txn initiating system (i.e sender)
      type: string
      maxLength: 99
      example: 0123456789
  responses:
    HttpErrorResponse:
      description: HTTP layer error details
      content:
        application/json:
          schema:
            type: object
            description: 'HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx'
            properties:
              errors:
                items:
                  type: object
                  properties:
                    code:
                      type: string
                      description: error code
                    message:
                      type: string
                      description: error message
    Response:
      description: Acknowledgement of message received after successful validation of message and signature
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: object
                properties:
                  ack_status:
                    $ref: '#/components/schemas/Ack'
                  timestamp:
                    $ref: '#/components/schemas/DateTime'
                  error:
                    $ref: '#/components/schemas/Error'
                  correlation_id:
                    $ref: '#/components/schemas/SearchResponse/properties/correlation_id'
                required:
                  - ack_status
                  - timestamp
                  - correlation_id
  securitySchemes:
    Authorization:
      type: http
      scheme: bearer
      bearerFormat: jwt
      description: User/System authenticated access token; (jwt bearer) token returned from implementing system's authentication/token api end points. All systems must implement token api.
