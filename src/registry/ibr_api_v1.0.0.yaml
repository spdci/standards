openapi: 3.0.3
info:
  title: Interoperability APIs - Integrated Beneficiary Registry
  x-logo:
    url: './dci-logo.png'
    backgroundColor: '#FFFFFF'
    altText: 'Digital Convergence Initiative'  
  description: |-
    The IBR(Integrated Beneficiary Registry) interoperability APIs describes different APIs some of them are usecase specific and other are generalized APIs to perform interoperable operations between IBR registry and SP-System.
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in upcoming version.

    1. Search: The Search API provides functionality to search based on demographic, identifiers and custom query
    2. Enrollment updates: The enrollment updates API send  details of beneficiaries enrolled in programs  from SP-System
    3. Enrolled : the enrolled API is a special type of search to return the programs a beneficiary is enrolled in
   
    Gitbook reference link[WIP]:
    - [Integrated Beneficiary Registry - V1.0 ](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0)

    Code directory links:
    - [Assistance Unit](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0/ibr/1.-crvs/data/code-directory/cd.ibr.01-assistance_unit)
    - [Enrollment Status](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0/ibr/1.-crvs/data/code-directory/cd.ibr.02-enrolment_status)
    - [Benefit Type](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0/ibr/1.-crvs/data/code-directory/cd.ibr.03-benefit_type)
    - [Institution Type](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0/ibr/1.-crvs/data/code-directory/cd.ibr.04-institution_type)   
    - [Legal Status](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0/ibr/1.-crvs/data/code-directory/cd.ibr.05-legal_status)
    - [Social Protection Functions](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0/ibr/1.-crvs/data/code-directory/cd.ibr.06-social_protection_functions)
    - [Contribution Type](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0/ibr/1.-crvs/data/code-directory/cd.ibr.07-contribution_type)
    - [Programme Type](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0/ibr/1.-crvs/data/code-directory/cd.ibr.08-programme_type)

    Data Objects:
    - [Beneficiary](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0/ibr/1.-crvs/data/data-objects/do.ibr.01-beneficiary)
    - [Programme](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0/ibr/1.-crvs/data/data-objects/do.ibr.02-programme)
    - [Benefit](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0/ibr/1.-crvs/data/data-objects/do.ibr.03-benefit)
    - [Benefit Frequency](https://standards.spdci.org/standards/v/wip-integrated-beneficiary-registry-v1.0.0/ibr/1.-crvs/data/data-objects/do.ibr.o4-benefit-frequency) 
    - [Group](https://standards.spdci.org/standards/v/wip-social-registry-v1.0.0/social-registry/1.-crvs/data/data-objects/do.sr.02-group)
    - [Member](https://standards.spdci.org/standards/v/wip-social-registry-v1.0.0/social-registry/1.-crvs/data/data-objects/do.sr.03-member)


    Each request is build up of three parts 
    - signature 
    - header 
    - message

    Information about each part is given below

    **Signature:**
    - The signature is used to verify the integrity of the message.
    - The signature is a hash of the message and is encrypted using the private key of the sender.
    - The receiver can verify the signature using the public key of the sender.

    **Header:**
    - The header contains information about various message header, refer to the header schema for more details.

    **Message:**

    - The message contains the actual payload of the message.
    - Refer example section to get sample data and also read Gitbook for details data objects
    - The receiver can decrypt the message using the private key of the "err.receiver_id.invalid"

  version: 1.0.0
  contact:
    name: DCI Social Protection
    email: info@spdci.org
  license:
   name: DCI Social Protection License
   url: https://api.spdci.org/LICENSE.md
 
servers:
  - url: "https://sandbox.spdci.org/namespace/v1.0.0"
    description: Sandbox Server
tags: 
  - name: Async
    description: Async endpoints
  - name: Sync 
    description: Sync endpoints
  - name: Schemas
    description: Schemas
  - name: Status Codes
    description: Status Codes
  - name: SearchRequest
    x-displayName: SearchRequest
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/SearchRequest" />    
  - name: SearchResponse
    x-displayName: SearchResponse
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/SearchResponse" />  
  - name: SearchStatusReasonCode
    x-displayName: SearchStatusReasonCode
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/SearchStatusReasonCode" />          
  - name: TxnStatusRequest
    x-displayName: TxnStatusRequest
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/TxnStatusRequest" />    
  - name: TxnStatusResponse
    x-displayName: TxnStatusResponse
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/TxnStatusResponse" />    
  - name: EnrollmentUpdatesRequest
    x-displayName: EnrollmentUpdatesRequest
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/EnrollmentUpdatesRequest" />    
  - name: EnrollmentUpdatesResponse
    x-displayName: EnrollmentUpdatesResponse
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/EnrollmentUpdatesResponse" />    
  - name: EnrolledRequest
    x-displayName: EnrolledRequest
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/EnrolledRequest" />    
  - name: EnrolledResponse
    x-displayName: EnrolledResponse
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/EnrolledResponse" />    
  - name: EncryptedMessage
    x-displayName: EncryptedMessage
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/EncryptedMessage" />    

x-tagGroups:
  - name: API Definitions
    tags:
      - Async
      - Sync
  - name: Schema Objects
    tags:
      - SearchRequest
      - SearchResponse
      - EnrollmentUpdatesRequest
      - EnrollmentUpdatesResponse
      - EnrolledRequest
      - EnrolledResponse
      - TxnStatusRequest
      - TxnStatusResponse
      - EncryptedMessage
  - name: Status Codes
    tags: 
      - SearchStatusReasonCode
paths:
 /registry/search:
  post: 
    summary: "/registry/search"
    description: |-
      The async search api will accept request and will send response to on-search endpoint. The IBR will implement /registry/search endpoint and the SP-System shall implement /registry/on-search to receive data from IBR.
      The search request message consist of reg_event_type, query_type, query, sort, pagination, consent, authorize, locale. The IBR will validate the request and will send response to on-search endpoint. 
      Information for each field is given below.
        - reg_event_type: The event type for which search to be performed, this can be any of event type explained in RegistryEventType.yaml
        - query_type: The query type on which registry to determene type of search process, this can be any of query type explained in QueryType.yaml
        - query: The query will indicate payload of data which to be seached in registry, this can be any of explained in RegistryQueries.yaml

    operationId: post_reg_search
    tags: 
      -  Async
    requestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
              type: object
              properties:
                signature:  
                  $ref: "#/components/schemas/MsgSignature"
                header:
                  allOf:
                    - $ref: "#/components/schemas/MsgHeader_V1.0.0"
                    - properties:
                        action:
                          enum:
                            - search
                message:
                  type: object
                  description: The search data using which registry search to be performed
                  oneOf:
                    - $ref: "#/components/schemas/SearchRequest"
                    - $ref: "#/components/schemas/EncryptedMessage"
              required:
                - header
                - message
        multipart/form-data:
          schema:
            allOf:
              - $ref: "#/components/schemas/FileInfo"
              - properties:
                  action:
                    enum:
                      - search
    responses:
        default:
          $ref: "#/components/responses/Response"
        '401':
          $ref: "#/components/responses/HttpErrorResponse"
        '403':
          $ref: "#/components/responses/HttpErrorResponse"
        '500':
          $ref: "#/components/responses/HttpErrorResponse"
    security:
      - Authorization: [ ]
    deprecated: false
 /registry/on-search:
  post: 
    summary: "/registry/on-search"
    description: |-
      The /registry/on-search end point tobe implemented by SP-System to receive search results from IBR. 
      The IBR will send data in format explained in SearchResponse.yaml. The reg_records will containe data that in explained in ibr/v1/Person.jsonld. 
      Refer example json at github [link](https://app.gitbook.com/o/0iSqNDBWH70sLmGExne0/s/bUVnrLEoih8bOGfpNjnB/1.-crvs/data/data-objects/person#example)
    operationId: post_reg_on-search
    tags: 
      -  Async
    requestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
              type: object
              properties:
                signature:  
                  $ref: "#/components/schemas/MsgSignature"
                header:
                  allOf:
                    - $ref: "#/components/schemas/MsgCallbackHeader_V1.0.0"
                    - properties:
                        action:
                          enum:
                            - on-search
                message:
                  type: object
                  oneOf:
                    - $ref: '#/components/schemas/SearchResponse'
                    - $ref: '#/components/schemas/EncryptedMessage'
              required:
                - header
        multipart/form-data:
          schema:
            allOf:
              - $ref: "#/components/schemas/FileInfo"
              - properties:
                  action:
                    enum:
                      - on-search
    responses:
        default:
          $ref: "#/components/responses/Response"
        '401':
          $ref: "#/components/responses/HttpErrorResponse"
        '403':
          $ref: "#/components/responses/HttpErrorResponse"
        '500':
          $ref: "#/components/responses/HttpErrorResponse"
    security:
      - Authorization: [ ]
    deprecated: false

 /registry/txn/status:
  post: 
    summary: "/registry/txn/status"
    description: |-
      The /registry/txn/status will be implemented by IBR. This will check status of reach request using transaction_id and/or reference_id(s).
    operationId: post_reg_txnstatus
    tags: 
      -  Async
    requestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
              type: object
              properties:
                signature:  
                  $ref: "#/components/schemas/MsgSignature"
                header:
                  allOf:
                    - $ref: "#/components/schemas/MsgHeader_V1.0.0"
                    - properties:
                        action:
                          enum:
                            - txn-status
                message:
                  type: object
                  oneOf:
                    - $ref: '#/components/schemas/TxnStatusRequest'
                    - $ref: '#/components/schemas/EncryptedMessage'
              required:
                - header
                - message
        multipart/form-data:
          schema:
            allOf:
              - $ref: "#/components/schemas/FileInfo"
              - properties:
                  action:
                    enum:
                      - txn-status
    responses:
        default:
          $ref: "#/components/responses/Response"
        '401':
          $ref: "#/components/responses/HttpErrorResponse"
        '403':
          $ref: "#/components/responses/HttpErrorResponse"
        '500':
          $ref: "#/components/responses/HttpErrorResponse"
    security:
      - Authorization: [ ]
    deprecated: false
 /registry/txn/on-status:
  post: 
    summary: "/registry/txn/on-status"
    description: |-
      The /registry/txn/on-status will be implemented by SP-System. The response with information about request and in some case it may contain data as well.
    operationId: post_reg_on-txnstatus
    tags: 
      -  Async
    requestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
              type: object
              properties:
                signature:  
                  $ref: "#/components/schemas/MsgSignature"
                header:
                  allOf:
                    - $ref: "#/components/schemas/MsgCallbackHeader_V1.0.0"
                    - properties:
                        action:
                          enum:
                            - txn-on-status
                message:
                  type: object
                  oneOf:
                    - $ref: '#/components/schemas/TxnStatusResponse'
                    - $ref: '#/components/schemas/EncryptedMessage'
              required:
                - header
        multipart/form-data:
          schema:
            allOf:
              - $ref: "#/components/schemas/FileInfo"
              - properties:
                  action:
                    enum:
                      - txn-on-status
    responses:
        default:
          $ref: "#/components/responses/Response"
        '401':
          $ref: "#/components/responses/HttpErrorResponse"
        '403':
          $ref: "#/components/responses/HttpErrorResponse"
        '500':
          $ref: "#/components/responses/HttpErrorResponse"
    security:
      - Authorization: [ ]
    deprecated: false

 /registry/sync/search:
  post: 
    summary: "/registry/sync/search"
    description: |- 
      The sync search api will accept request and will send response immediately
      The search request message consist of reg_event_type, query_type, query, sort, pagination, consent, authorize, locale. The IBR will validate the request and will send response to on-search endpoint. 
      Information for each field is given below.
        - reg_event_type: The event type for which search to be performed, this can be any of event type explained in RegistryEventType.yaml
        - query_type: The query type on which registry to determene type of search process, this can be any of query type explained in QueryType.yaml
        - query: The query will indicate payload of data which to be seached in registry, this can be any of explained in RegistryQueries.yaml

    operationId: post_reg_sync_search
    tags: 
      -  Sync
    requestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
              type: object
              properties:
                signature:  
                  $ref: "#/components/schemas/MsgSignature"
                header:
                  allOf:
                    - $ref: "#/components/schemas/MsgHeader_V1.0.0"
                    - properties:
                        action:
                          enum:
                            - search
                message:
                  type: object
                  description: The search data using which registry search to be performed
                  oneOf:
                    - $ref: '#/components/schemas/SearchRequest'
                    - $ref: '#/components/schemas/EncryptedMessage'
              required:
                - header
                - message
    responses:
        default:
          description: "Registry search response"
          content:
            application/json:
              schema:
                type: object
                properties:
                  signature:  
                    $ref: "#/components/schemas/MsgSignature"
                  header:
                    allOf:
                      - $ref: "#/components/schemas/MsgCallbackHeader_V1.0.0"
                      - properties:
                          action:
                            enum:
                              - on-search
                  message:
                    type: object
                    oneOf:
                      - $ref: '#/components/schemas/SearchResponse'
                      - $ref: '#/components/schemas/EncryptedMessage'
                required:
                  - header
        '401':
          $ref: "#/components/responses/HttpErrorResponse"
        '403':
          $ref: "#/components/responses/HttpErrorResponse"
        '500':
          $ref: "#/components/responses/HttpErrorResponse"
    security:
      - Authorization: [ ]    
    deprecated: false
 /registry/sync/enrollment/updates:
  post: 
    summary: "/registry/sync/enrollment/updates"
    description: |-
      The /registry/enrollments/updates endpoint will be implemented by IBR to receive details of beneficiaries enrolled in programs from SP-System.
      The receipt_type and beneficiaries will be required to make request. 
      Three receipt types are supported as of now, they are 
        1) Enrolled beneficiaries 
        2) Updated beneficiaries details
      The beneficiaries will contain list of beneficiaries information for which enrollments updated to be generated.
    operationId: post_reg_enrollments_updates
    tags: 
      -  Sync
    requestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
              type: object
              properties:
                signature:  
                  $ref: "#/components/schemas/MsgSignature"
                header:
                  allOf:
                    - $ref: "#/components/schemas/MsgCallbackHeader_V1.0.0"
                    - properties:
                        action:
                          enum:
                            - notify
                message:
                  type: object
                  oneOf:
                    - $ref: '#/components/schemas/EnrollmentUpdatesRequest'
                    - $ref: '#/components/schemas/EncryptedMessage'
              required:
                - header
        multipart/form-data:
          schema:
            allOf:
              - $ref: "#/components/schemas/FileInfo"
              - properties:
                  action:
                    enum:
                      - notify
    responses:
        default:
          $ref: "#/components/schemas/EnrollmentUpdatesResponse"
        '401':
          $ref: "#/components/responses/HttpErrorResponse"
        '403':
          $ref: "#/components/responses/HttpErrorResponse"
        '500':
          $ref: "#/components/responses/HttpErrorResponse"
    security:
      - Authorization: [ ]
    deprecated: false
 /registry/sync/enrolled:
  post: 
    summary: "/registry/sync/enrolled"
    description: |- 
      search programmes person is enrolled in
    operationId: post_reg_enrolled
    tags: 
      -  Sync
    requestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
              type: object
              properties:
                signature:  
                  $ref: "#/components/schemas/MsgSignature"
                header:
                  allOf:
                    - $ref: "#/components/schemas/MsgHeader_V1.0.0"
                    - properties:
                        action:
                          enum:
                            - search
                message:
                  type: object
                  description: The search data using which registry search to be performed
                  oneOf:
                    - $ref: '#/components/schemas/EnrolledRequest'
                    - $ref: "#/components/schemas/EncryptedMessage"
              required:
                - header
                - message
        multipart/form-data:
          schema:
            allOf:
              - $ref: "#/components/schemas/FileInfo"
              - properties:
                  action:
                    enum:
                      - search
    responses:
        default:
          $ref: "#/components/schemas/EnrolledResponse"
        '401':
          $ref: "#/components/responses/HttpErrorResponse"
        '403':
          $ref: "#/components/responses/HttpErrorResponse"
        '500':
          $ref: "#/components/responses/HttpErrorResponse"
    deprecated: false
 /registry/sync/txn/status:
  post: 
    summary: "/registry/sync/txn/status"
    description: |-
      The /registry/sync/txn/status will be implemented by IBR. This will check status of reach request using transaction_id and/or reference_id(s).
    operationId: post_reg_sync_txnstatus
    tags: 
      -  Sync
    requestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
              type: object
              properties:
                signature:  
                  $ref: "#/components/schemas/MsgSignature"
                header:
                  allOf:
                    - $ref: "#/components/schemas/MsgHeader_V1.0.0"
                    - properties:
                        action:
                          enum:
                            - txn-status
                message:
                  type: object
                  oneOf:
                    - $ref: '#/components/schemas/TxnStatusRequest'
                    - $ref: '#/components/schemas/EncryptedMessage'
              required:
                - header
                - message
    responses:
        default:
          description: "Transaction status check response"
          content:
            application/json:
              schema:
                  type: object
                  properties:
                    signature:  
                      $ref: "#/components/schemas/MsgSignature"
                    header:
                      allOf:
                        - $ref: "#/components/schemas/MsgCallbackHeader_V1.0.0"
                        - properties:
                            action:
                              enum:
                                - txn-on-status
                    message:
                      type: object
                      oneOf:
                        - $ref: '#/components/schemas/TxnStatusResponse'
                        - $ref: '#/components/schemas/EncryptedMessage'
                  required:
                    - header
        '401':
          $ref: "#/components/responses/HttpErrorResponse"
        '403':
          $ref: "#/components/responses/HttpErrorResponse"
        '500':
          $ref: "#/components/responses/HttpErrorResponse"
    deprecated: false

 
components:
  schemas: 
    EnrollmentUpdatesRequest: 
      $ref: ibr/EnrollmentUpdatesRequest.yaml
    EnrollmentUpdatesResponse: 
      $ref: ibr/EnrollmentUpdatesResponse.yaml
    SearchRequest: 
      $ref: ibr/SearchRequest.yaml
    SearchResponse: 
      $ref: ibr/SearchResponse.yaml
    SearchStatusReasonCode: 
      $ref: schema/SearchStatusReasonCode.yaml
    TxnStatusRequest: 
      $ref: ibr/TxnStatusRequest.yaml            
    TxnStatusResponse: 
      $ref: ibr/TxnStatusResponse.yaml  
    EnrolledRequest:
      $ref: ibr/EnrolledRequest.yaml
    EnrolledResponse:
      $ref: ibr/EnrolledResponse.yaml
    EncryptedMessage: 
      $ref: ../common/schema/EncryptedMessage.yaml
    Error: 
      $ref: ../common/schema/Error.yaml
    FileInfo: 
      $ref: ../common/schema/FileInfo.yaml
    MsgCallbackHeader_V1.0.0: 
      $ref: ibr/MsgCallbackHeader_V1.0.0.yaml
    MsgHeader_V1.0.0: 
      $ref: ibr/MsgHeader_V1.0.0.yaml
    MsgHeaderStatusReasonCode: 
      $ref: ../common/schema/MsgHeaderStatusReasonCode.yaml
    MsgSignature: 
      $ref:  ../common/schema/MsgSignature.yaml

  responses: 
    HttpErrorResponse:
      $ref: ../common/response/HttpErrorResponse.yaml       
    Response:
      $ref: ../common/response/Response.yaml    
  securitySchemas:
    Authorization:
      $ref: ../common/security/Authorization.yaml
